---
- name: Disable running SELinux
  selinux: state=disabled

- name: Disable boot time SELinux
  lineinfile:
    dest: '/etc/selinux/config'
    regexp: '^SELINUX.*'
    line: 'SELINUX=disabled'

- name: Update all YUM packages
  yum:
    update_cache: yes
    name: '*'
    state: latest

- name: Disable root account
  user:
    name: root
    password: "*"
  when: disable_root | bool

- name: Clear YUM cache
  command: 'yum clean all'
  args:
    warn: false
  tags: sof-elk_base

- name: Install core RPM set via YUM
  yum:
    name: '{{ base_yum_packages }}'
    state: present
  tags: sof-elk_base

- name: Install VMware-specific RPM set if installing to VMware guest
  yum:
    name: '{{ vmware_yum_packages }}'
    state: present
  tags: sof-elk_base
  when: ansible_virtualization_role == "guest" and ansible_virtualization_type == "VMware"

- name: Upgrade pip
  pip:
    name: pip
    executable: pip3
    state: latest
  tags: sof-elk_base

- name: Install pip dependencies
  pip:
    name: '{{ base_pip_modules }}'
    executable: pip3
    state: present
  tags: sof-elk_base

- name: Disable DNS resolution for SSHD
  lineinfile:
    dest: '/etc/ssh/sshd_config'
    regexp: '^UseDNS.*'
    line: 'UseDNS no'
  notify: restart sshd
  tags: sof-elk_base

- name: Modify secure_path in /etc/sudoers
  lineinfile:
    dest: '/etc/sudoers'
    regex: '^Defaults.*secure_path'
    line: 'Defaults    secure_path = /sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin:/usr/local/sof-elk/supporting-scripts'
  tags: sof-elk_base

- name: Create elk_user account
  user:
    name: 'elk_user'
    comment: 'SOF-ELK User'
    password: '$6$572forsofelk$BdARbzeCTR5w.I/Tcjy8S2MxFjU51xEuzv/V30oUuL1n8P.GtOC7sQ2ZIUkoGWITBXnfAZAXzOWDz5djiLLK.1'
    groups: wheel
    append: yes
    state: present
  tags: sof-elk_base

- name: Set up elk_user's .bash_profile
  blockinfile:
    path: '/home/elk_user/.bash_profile'
    block: |
      if [ -f /usr/local/sof-elk/supporting-scripts/elk_user_login.sh ]; then
          . /usr/local/sof-elk/supporting-scripts/elk_user_login.sh
      fi
  tags: sof-elk_base

- name: Create vim configs if they do not exist
  copy:
    content: ''
    dest: '~{{ item }}/.vimrc'
    force: no
    owner: '{{ item }}'
    group: '{{ item }}'
    mode: 0600
  with_items:
    - [ 'root', 'elk_user' ]
  tags: sof-elk_base

- name: Configure vim
  lineinfile:
    dest: '~{{ item[0] }}/.vimrc'
    regex: '^{{ item[1] }}'
    line: '{{ item[1] }}'
  with_nested:
    - [ 'root', 'elk_user' ]
    - [ 'set smartindent', 'set tabstop=4', 'set shiftwidth=4', 'set expandtab', 'colorscheme torte', 'set hlsearch' ]
  tags: sof-elk_base

- name: Set up login banner text files
  copy:
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
    owner: root
    group: root
    mode: 0644
  with_items:
    - { src: 'issue.prep', dest: '/etc/issue.prep' }
  tags: sof-elk_base

- name: Customize login banner
  shell: cat /etc/issue.prep | sed -e "s/<%REVNO%>/*Ansible-built* on $( date +%Y-%m-%d )/" > /etc/issue
  tags: sof-elk_base

- name: Set up sysctl configuration
  copy:
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
    owner: root
    group: root
    mode: 0644
  with_items:
    - { src: 'sof-elk_sysctl.conf', dest: '/etc/sysctl.d/sof-elk.conf' }
  register: sysctl_update
  tags: sof-elk_base

- name: Load sysctl settings
  command: 'sysctl --system'
  when: sysctl_update.changed
  tags: sof-elk_base

- name: Compress rotated log files
  lineinfile:
    dest: '/etc/logrotate.conf'
    regex: '^compress'
    line: 'compress'
  tags: sof-elk_base

- name: Check out SOF-ELK repo
  git:
    repo: 'https://github.com/philhagen/sof-elk'
    dest: '/usr/local/sof-elk'
    version: "{{ git_branch }}"
    update: yes
  tags: sof-elk_base

- name: set git clone post-merge hook
  copy:
    src: 'sof-elk_post-merge.sh'
    dest: '/usr/local/sof-elk/.git/hooks/post-merge'
    owner: root
    group: root
    mode: 0700
  tags: sof-elk_base

- name: Create required symlinks from git repo
  file:
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
    state: link
  with_items:
    - { src: '/usr/local/sof-elk/supporting-scripts/distro_prep.sh', dest: '/root/distro_prep.sh' }
    - { src: '/usr/local/sof-elk/supporting-scripts/yum-post-transaction_sof-elk.action', dest: '/etc/yum/post-actions/yum-post-transaction_sof-elk.action' }
    - { src: '/usr/local/sof-elk/supporting-scripts/es_heapsize_calc.sh', dest: '/usr/local/sbin/es_heapsize_calc.sh' }
    - { src: '/usr/local/sof-elk/supporting-scripts/fw_modify.sh', dest: '/usr/local/sbin/fw_modify.sh' }
    - { src: '/usr/local/sof-elk/supporting-scripts/load_all_dashboards.sh', dest: '/usr/local/sbin/load_all_dashboards.sh' }
    - { src: '/usr/local/sof-elk/supporting-scripts/nfdump2sof-elk.sh', dest: '/usr/local/sbin/nfdump2sof-elk.sh' }
    - { src: '/usr/local/sof-elk/supporting-scripts/post_merge.sh', dest: '/usr/local/sbin/post_merge.sh' }
    - { src: '/usr/local/sof-elk/supporting-scripts/sof-elk_clear.py', dest: '/usr/local/sbin/sof-elk_clear.py' }
    - { src: '/usr/local/sof-elk/supporting-scripts/sof-elk_update.sh', dest: '/usr/local/sbin/sof-elk_update.sh' }
    - { src: '/usr/local/sof-elk/supporting-scripts/kick-aws-logs.sh', dest: '/usr/local/sbin/kick-aws-logs.sh' }
    - { src: '/usr/local/sof-elk/supporting-scripts/cronjobs/git-remote-update.cron', dest: '/etc/cron.d/git-remote-update.cron' }
    - { src: '/usr/local/sof-elk/supporting-scripts/30-sof-elk', dest: '/etc/NetworkManager/dispatcher.d/30-sof-elk' }
    - { src: '/usr/local/sof-elk/supporting-scripts/geoip_bootstrap/geoip_bootstrap.sh', dest: '/usr/local/sbin/geoip_bootstrap.sh' }
    - { src: '/usr/local/sof-elk/supporting-scripts/geoip_update_logstash.sh', dest: '/usr/local/sbin/geoip_update_logstash.sh' }
 #   - { src: 'xxx', dest: 'xxx' }
  tags: sof-elk_base

- name: Install default GeoIP configuration
  copy:
    src: 'GeoIP.conf.default'
    dest: '/etc/GeoIP.conf.default'
    owner: root
    group: root
    mode: 0644
  tags: sof-elk_base

- name: Create geoip database directory
  file:
    path: '/usr/local/share/GeoIP'
    owner: root
    group: root
    mode: 0755
    state: directory
  tags: sof-elk_base

- name: Download final versions of old-licensed GeoIP databases
  get_url:
    url: https://lewestech.com/dist/GeoLite2-{{ item.name }}.mmdb
    dest: /usr/local/share/GeoIP/GeoLite2-{{ item.name }}.mmdb
    checksum: md5:{{ item.md5 }}
    owner: root
    group: root
    mode: 0644
  with_items:
    - { name: 'ASN', md5: 'c20977100c0a6c0842583ba158e906ec' }
    - { name: 'City', md5: '4c60b3acf2e6782d48ce2b42979f7b98' }
    - { name: 'Country', md5: '849e7667913e375bb3873f8778e8fb17' }
  tags: sof-elk_base
  when: geoip_accountid|length == 0
  # note: these files were downloaded from https://web.archive.org/web/20191222130401/https://dev.maxmind.com/geoip/geoip2/geolite2/ on 2023-06-20

- name: Install templated GeoIP configuration to perform download
  template:
    src: 'GeoIP.conf.j2'
    dest: '/etc/GeoIP.conf'
    owner: root
    group: root
    mode: 0600
  tags: sof-elk_base
  when: geoip_accountid|length > 0

- name: Install geoip data
  command: geoipupdate
  tags: sof-elk_base
  when: geoip_accountid|length > 0

- name: Remove GeoIP configuration
  file:
    path: /etc/GeoIP.conf
    state: absent
  when: not geoip_config_persist | bool and geoip_accountid|length > 0

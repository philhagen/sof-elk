# SOF-ELKÂ® Configuration File
# (C)2024 Lewes Technology Consulting, LLC
#
# This file contains filters, transforms, and enrichments for Filesystem logs from the KAPE forensic tool

filter {
  if [labels][type] == "kape_filesystem" {
    mutate {
      # create two "timestamp" fields with the MACBs in subfields
      # create a KAPE-specific bit field
      # promote the remaining fields of interest out of the [raw] placeholder
      # remove the [raw] placeholder

      # see https://binaryforay.blogspot.com/2018/06/introducing-mftecmd.html and
      # https://computerforensics.parsonage.co.uk/downloads/TheMeaningofLIFE.pdf
      rename => {
        "[raw][LastRecordChange0x10]" => "[file][stdinfo][ctime]"
        "[raw][LastModified0x10]" => "[file][stdinfo][mtime]"
        "[raw][LastAccess0x10]" => "[file][stdinfo][accessed]"
        "[raw][Created0x10]" => "[file][stdinfo][created]"

        "[raw][LastRecordChange0x30]" => "[file][filename][ctime]"
        "[raw][LastModified0x30]" => "[file][filename][mtime]"
        "[raw][LastAccess0x30]" => "[file][filename][accessed]"
        "[raw][Created0x30]" => "[file][filename][created]"

        "[raw][InUse]" => "[kape][mft][inuse]"
        "[raw][HasAds]" => "[kape][mft][hasads]"
        "[raw][IsAds]" => "[kape][mft][isads]"
        "[raw][Timestomped]" => "[kape][mft][timestomped]"
        "[raw][Copied]" => "[kape][mft][copied]"
        "[raw][NameType]" => "[kape][mft][name_type]"

        "[raw][EntryNumber]" => "[file][inode]"
        "[raw][SequenceNumber]" => "[file][sequence_number]"
        "[raw][ParentEntryNumber]" => "[file][parent][inode]"
        "[raw][ParentSequenceNumber]" => "[file][parent][sequence_number]"
        "[raw][ParentPath]" => "[file][directory]"
        "[raw][Extension]" => "[file][extension]"
        "[raw][FileSize]" => "[file][size]"
        "[raw][ReferenceCount]" => "[file][reference_count]"
        "[raw][ReparseTarget]" => "[file][reparse][target]"
        "[raw][UpdateReasons]" => "[file][update_reasons]"
        "[raw][UpdateSequenceNumber]" => "[file][update_sequence_number]"
        "[raw][UpdateTimestamp]" => "[file][update_timestamp]"
        "[raw][LogfileSequenceNumber]" => "[file][logfile][sequence_number]"
        "[raw][SecurityId]" => "[file][uid]"
        "[raw][ObjectIdFileDroid]" => "[file][object_id]"
        "[raw][LoggedUtilStream]" => "[file][stream_name]"
        "[raw][ZoneIdContents]" => "[file][fork_contents]"

        "[raw][OffsetToData]" => "[file][offset_to_data]"
        "[raw][SourceFile]" => "[file][source_file]"

        "[raw][isDirectory]" => "[@metadata][isDirectory]"
      }
    }

    # these fields only present in the $MFT file
    if [raw][FileName] {
      mutate {
        add_tag => [ "filesystem_mft" ]
        rename => {
          "[raw][FileName]" => "[file][name]"
        }
      }

    # these fields only present in the $J file
    } else if [raw][Name] {
      mutate {
        add_tag => [ "filesystem_j" ]
        rename => {
          "[raw][Name]" => "[file][name]"
        }
      }
    }

    # if the file directory or extension are empty, remove each
    if [file][directory] == "" {
      mutate {
        remove_field => [ "[file][directory]" ]
      }
    }
    if [file][extension] == "" {
      mutate {
        remove_field => [ "[file][extension]" ]
      }
    }

    # if there is no filesize, set it to zero
    if ![file][size] {
      mutate {
        add_field => { "[file][size]" => 0 }
      }
      # this is needed because add_field always adds a string?!
      mutate {
        convert => {
          "[file][size]" => "integer"
        }
      }
    }

    # construct file.path - assuming windows directory separator at this time
    if [file][directory] and [file][path] {
      mutate {
        add_field => {
          "[file][path]" => "%{[file][directory]}\%{[file][name]}"
        }
      }
    }

    # override file.extension and add fork_name for ADS entries
    if [kape][mft][isads] == "true" {
      mutate {
        remove_field => [ "[file][extension]", "[file][fork_name]" ]
      }
      grok {
        match => [ "[file][name]", "%{GREEDYDATA}\.%{DATA:[file][extension]}:%{DATA:[file][fork_name]}$" ]
      }
    } else {
      # remove leading dot from file.extension
      if [file][extension] {
        mutate {
          gsub => [ "[file][extension]", "^.", "" ]
        }
      }
    }

    # use the stdinfo LastModified time for @timestamp, if present
    # otherwise, use created (e.g. with USN Journal records) or updated for $J records
    if [file][stdinfo][mtime] {
      date {
        match => [ "[file][stdinfo][mtime]", "ISO8601" ]
      }
    } else if [file][stdinfo][created] {
      date {
        match => [ "[file][stdinfo][created]", "ISO8601" ]
      }
    # this is present in the $J file
    } else if [file][update_timestamp] {
      date {
        match => [ "[file][update_timestamp]", "ISO8601" ]
      }
    }

    # convert all stdinfo timestamps to date/time types
    date {
      match => [ "[file][stdinfo][ctime]", "ISO8601" ]
      target => "[file][stdinfo][ctime]"
    }
    date {
      match => [ "[file][stdinfo][mtime]", "ISO8601" ]
      target => "[file][stdinfo][mtime]"
    }
    date {
      match => [ "[file][stdinfo][accessed]", "ISO8601" ]
      target => "[file][stdinfo][accessed]"
    }
    date {
      match => [ "[file][stdinfo][created]", "ISO8601" ]
      target => "[file][stdinfo][created]"
    }

    # convert all FILENAME timestamps to date/time types
    date {
      match => [ "[file][filename][ctime]", "ISO8601" ]
      target => "[file][filename][ctime]"
    }
    date {
      match => [ "[file][filename][mtime]", "ISO8601" ]
      target => "[file][filename][mtime]"
    }
    date {
      match => [ "[file][filename][accessed]", "ISO8601" ]
      target => "[file][filename][accessed]"
    }
    date {
      match => [ "[file][filename][created]", "ISO8601" ]
      target => "[file][filename][created]"
    }

    # file attributes are in integer form in the $MFT file
    if [raw][SiFlags] {
      mutate {
        rename => {
          "[raw][SiFlags]" => "[file][attributes]"
        }
        add_field => {
          "[@metadata][attribute_type]" => "int"
        }
      }

    # file attributes are in pipe-separated form in the $J file
    } else if [raw][FileAttributes] {
      mutate {
        rename => {
          "[raw][FileAttributes]" => "[file][attributes]"
        }
        gsub => [
          "[file][attributes]", "\|", ","
        ]
        lowercase => [ "[file][attributes]" ]
        add_field => {
          "[@metadata][attribute_type]" => "str"
        }
      }
    }

    # this is a comma-separated list of reasons, so split to an array
    if [file][update_reasons] {
      mutate {
        lowercase => [ "[file][update_reasons]" ]
        split => { "[file][update_reasons]" => "|" }
      }
    }
  }
}

# SOF-ELKÂ® Configuration File
# (C)2025 Lewes Technology Consulting, LLC
#
# This file contains filters, transforms, and enrichments for AWS Route53 and PassiveDNS messages

filter {
  # json-formatted logs already pre-processed into [raw]
  if [labels][type] == "archive-passivedns" and [raw] {

    if [raw][answers] and [raw][answers][0] {
      split {
        field => "[raw][answers]"
      }

    } else {
      mutate {
        add_tag => [ "no_response_data" ]
      }
    }

    date {
      match => [ "[raw][query_timestamp]", "ISO8601" ]
    }

    mutate {
      rename => {
        "[raw][account_id]" => "[aws][route53][account_id]"
        "[raw][region]" => "[cloud][region]"
        "[raw][vpc_id]" => "[aws][route53][vpc_id]"
        "[raw][query_name]" => "[dns][question][name]"
        "[raw][query_type]" => "[dns][question][type]"
        "[raw][query_class]" => "[dns][question][class]"
        "[raw][rcode]" => "[dns][response][code]"
        "[raw][answers][Rdata]" => "[dns][answers][data]"
        "[raw][answers][Type]" => "[dns][question][type]"
        "[raw][answers][Class]" => "[dns][answers][class]"
        "[raw][srcaddr]" => "[source][ip]"
        "[raw][srcport]" => "[source][port]"
        "[raw][transport]" => "[network][transport]"
        "[raw][srcids][instance]" => "[aws][route53][instance]"
        "[raw][srcids][resolver_endpoint]" => "[aws][route53][resolver_instance]"
        "[raw][resolver_network_interface]" => "[aws][route53][resolver_network_interface]"
      }
      lowercase => [ "[network][transport]" ]
    }
    mutate {
      add_field => {
        "[log][syslog][appname]" => "route53"
        "[log][syslog][hostname]" => "0.0.0.0"
      }
      remove_field => [ "raw" ]
    }

  # passivedns records
  } else if [labels][type] == "archive-passivedns" or (([labels][type] == "syslog") and [log][syslog][appname] == "passivedns") {
    grok {
      patterns_dir => [ "/usr/local/sof-elk/grok-patterns" ]
      match => { "message", [
        "%{UNIX_MSEC:unix_timestamp}[0-9]*\|\|%{IP:[source][ip]}\|\|%{IP:[destination][ip]}\|\|%{WORD:[dns][answers][class]}\|\|%{PDNS_IPORHOST:[dns][question][name]}\|\|%{WORD:[dns][question][type]}\|\|%{PDNS_ANSWER:[dns][answers][data]}\|\|%{INT:[dns][answers][ttl]}\|\|%{INT:[passivedns][cache_hits]}"
      ] }
      add_tag => [ "got_passivedns" ]
      tag_on_failure => [ "_grokparsefailure_6014-01" ]
    }
  }

  if [labels][type] == "archive-passivedns" and "got_passivedns" in [tags] {
    mutate {
      add_field => {
        "[log][syslog][appname]" => "passivedns"
        "[log][syslog][hostname]" => "0.0.0.0"
      }
    }
  }
  if [labels][type] == "archive-passivedns" or (([labels][type] == "syslog") and [log][syslog][appname] == "passivedns") and "got_passivedns" in [tags] {
    mutate {
      # remove trailing dots for both queries and answers
      gsub => [ "[dns][question][name]", "\.$", "" ]
      gsub => [ "[dns][answers][data]", "\.$", "" ]

      # remove the decimal point in the timestamp, so instead of sec.msec, we have msec
      gsub => [ "unix_timestamp", "\.", "" ]
    }

    date {
      match => [ "unix_timestamp", "UNIX_MS" ]
    }

    mutate {
      remove_field => [ "unix_timestamp" ]
      add_tag => [ "dns_record", "parse_done" ]
    }

    if [labels][type] == "archive-passivedns" {
      if [logsource] {
        mutate {
          add_field => { "[sof-elk][path]" => "PassiveDNS log from %{logsource}" }
        }
      } else if "filebeat" in [tags] {
        mutate {
          add_field => { "[sof-elk][path]" => "filebeat: %{[log][file][path]}" }
        }
      } else {
        mutate {
          add_field => { "[sof-elk][path]" => "unknown source" }
        }
      }
    }

    if [dns][answers][data] and [dns][question][type] != "CNAME" {
      grok {
        match => { "[dns][answers][data]", [
          "^%{IP:[dns][answers][ip]}$"
        ] }
        tag_on_failure => [ "_grokparsefail_6014-02"]
      }
    }
  }
}

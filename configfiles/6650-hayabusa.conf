# SOF-ELKÂ® Configuration File
# (C)2025 Lewes Technology Consulting, LLC
#
# This file contains filters, transforms, and enrichments for records created by Yamato Security's Hayabusa tool
# It builds upon content initially created by @bedangSen

filter {
  if [labels][type] == "hayabusa" {
    mutate {
      rename => {
        "[raw][Channel]" => "[winlog][channel]"
        "[raw][Computer]" => "[winlog][computer_name]"
        "[raw][Details][Acct]" => "[winlog][user][type]"
        "[raw][Details][Cmdline]" => "[process][command_line]"
        "[raw][Details][Company]" => "[winlog][event_data][Company]"
        "[raw][Details][CreationTime]" => "[@metadata][NewCreationUtcTime]"
        "[raw][Details][Description]" => "[winlog][event_data][Description]"
        "[raw][Details][Details]" => "[winlog][event_data][StartType]"
        "[raw][Details][EventType]" => "[winlog][event_data][EventType]"
        "[raw][Details][FailureReason]" => "[winlog][event_data][dpapi][FailureReason]"
        "[raw][Details][LGUID]" => "[winlog][event_data][LogonGuid]"
        "[raw][Details][LID]" => "[winlog][event_data][LogonId]"
        "[raw][Details][MasterKeyId]" => "[winlog][event_data][dpapi][MasterKeyId]"
        "[raw][Details][ParentCmdline]" => "[process][parent][command_line]"
        "[raw][Details][ParentPGUID]" => "[process][parent][entity_id]"
        "[raw][Details][ParentPID]" => "[process][parent][pid]"
        "[raw][Details][Path]" => "[winlog][event_data][TargetFilename]"
        "[raw][Details][Payload]" => "[winlog][payload_data][Content1]"
        "[raw][Details][PGUID]" => "[process][entity_id]"
        "[raw][Details][PID]" => "[winlog][process][pid]"
        "[raw][Details][PreviousTime]" => "[@metadata][PreviousCreationUtcTime]"
        "[raw][Details][Proc]" => "[process][executable]"
        "[raw][Details][Product]" => "[winlog][event_data][Product]"
        "[raw][Details][Proto]" => "[network][transport]"
        "[raw][Details][RecoveryKeyId]" => "[winlog][event_data][dpapi][RecoveryKeyId]"
        "[raw][Details][RecoveryServer]" => "[winlog][event_data][dpapi][RecoveryServer]"
        "[raw][Details][ScriptBlock]" => "[winlog][event_data][ScriptBlockText]"
        "[raw][Details][SID]" => "[winlog][event_data][SubjectUserSid]"
        "[raw][Details][Sig]" => "[winlog][event_data][Signature]"
        "[raw][Details][Signed]" => "[winlog][event_data][Signed]"
        "[raw][Details][SigStatus]" => "[winlog][event_data][SignatureStatus]"
        "[raw][Details][SrcComp]" => "[source][host]"
        "[raw][Details][SrcHost]" => "[source][host]"
        "[raw][Details][SrcIP]" => "[source][ip]"
        "[raw][Details][SrcPGUID]" => "[winlog][event_data][SourceInstanceId]"
        "[raw][Details][SrcPID]" => "[winlog][event_data][SourceProcessId]"
        "[raw][Details][SrcPort]" => "[source][port]"
        "[raw][Details][SrcProc]" => "[winlog][event_data][SourceImage]"
        "[raw][Details][SrcSID]" => "[winlog][event_data][MemberSid]"
        "[raw][Details][SrcUser]" => "[winlog][event_data][SourceUserName]"
        "[raw][Details][Svc]" => "[winlog][provider_name]"
        "[raw][Details][TgtGrp]" => "[winlog][event_data][TargetGroupName]"
        "[raw][Details][TgtHost]" => "[destination][host]"
        "[raw][Details][TgtIP]" => "[destination][ip]"
        "[raw][Details][TgtObj]" => "[winlog][event_data][TargetObject]"
        "[raw][Details][TgtPGUID]" => "[winlog][event_data][TargetProcessGuid]"
        "[raw][Details][TgtPID]" => "[winlog][event_data][TargetProcessId]"
        "[raw][Details][TgtPort]" => "[destination][port]"
        "[raw][Details][TgtProc]" => "[winlog][event_data][TargetImage]"
        "[raw][Details][TgtSvr]" => "[winlog][event_data][TargetServerName]"
        "[raw][Details][TgtUser]" => "[winlog][event_data][TargetUserName]"
        "[raw][Details][Type]" => "[winlog][event_data][Type]"
        "[raw][Details][User]" => "[@metadata][User]"
        "[raw][EventID]" => "[winlog][event_id]"
        "[raw][ExtraFieldInfo][AccountName]" => "[winlog][user][account]"
        "[raw][ExtraFieldInfo][AuthenticationPackageName]" => "[winlog][user][AuthenticationPackageName]"
        "[raw][ExtraFieldInfo][BackupPath]" => "[process][BackupPath]"
        "[raw][ExtraFieldInfo][ClientProcessId]" => "[process][client][pid]"
        "[raw][ExtraFieldInfo][ClientProcessStartKey]" => "[process][client][StartKey]"
        "[raw][ExtraFieldInfo][ContextInfo]" => "[winlog][event_data][ContextInfo]"
        "[raw][ExtraFieldInfo][CreationUtcTime]" => "[@metadata][CreationUtcTime]"
        "[raw][ExtraFieldInfo][CurrentDirectory]" => "[process][working_directory]"
        "[raw][ExtraFieldInfo][FileVersion]" => "[process][pe][file_version]"
        "[raw][ExtraFieldInfo][ImpersonationLevel]" => "[winlog][event_data][ImpersonationLevel]"
        "[raw][ExtraFieldInfo][IntegrityLevel]" => "[winlog][event_data][IntegrityLevel]"
        "[raw][ExtraFieldInfo][KeyLength]" => "[winlog][event_data][KeyLength]"
        "[raw][ExtraFieldInfo][LogonGuid]" => "[winlog][event_data][LogonGuid]"
        "[raw][ExtraFieldInfo][LogonProcessName]" => "[winlog][event_data][LogonProcessName]"
        "[raw][ExtraFieldInfo][MemberName]" => "[winlog][event_data][MemberName]"
        "[raw][ExtraFieldInfo][NewThreadId]" => "[winlog][event_data][NewThreadId]"
        "[raw][ExtraFieldInfo][OriginalFileName]" => "[process][pe][original_file_name]"
        "[raw][ExtraFieldInfo][ParentImage]" => "[process][parent][executable]"
        "[raw][ExtraFieldInfo][Path]" => "[winlog][event_data][Path]"
        "[raw][ExtraFieldInfo][PrivilegeList]" => "[winlog][event_data][PrivilegeList]"
        "[raw][ExtraFieldInfo][ProcessId]" => "[winlog][event_data][ProcessId]"
        "[raw][ExtraFieldInfo][ProcessName]" => "[winlog][event_data][ProcessName]"
        "[raw][ExtraFieldInfo][ServiceType]" => "[winlog][event_data][ServiceType]"
        "[raw][ExtraFieldInfo][StartAddress]" => "[winlog][event_data][StartAddress]"
        "[raw][ExtraFieldInfo][StartFunction]" => "[winlog][event_data][StartFunction]"
        "[raw][ExtraFieldInfo][StartModule]" => "[winlog][event_data][StartModule]"
        "[raw][ExtraFieldInfo][StartType]" => "[winlog][event_data][StartType]"
        "[raw][ExtraFieldInfo][SubjectDomainName]" => "[winlog][event_data][SubjectDomainName]"
        "[raw][ExtraFieldInfo][SubjectLogonId]" => "[winlog][event_data][SubjectLogonId]"
        "[raw][ExtraFieldInfo][SubjectUserName]" => "[winlog][event_data][SubjectUserName]"
        "[raw][ExtraFieldInfo][SubjectUserSid]" => "[winlog][event_data][SubjectUserSid]"
        "[raw][ExtraFieldInfo][TargetDomainName]" => "[winlog][event_data][TargetDomainName]"
        "[raw][ExtraFieldInfo][TargetGroupName]" => "[winlog][event_data][TargetGroupName]"
        "[raw][ExtraFieldInfo][TargetSid]" => "[winlog][event_data][TargetProcessGuid]"
        "[raw][ExtraFieldInfo][TerminalSessionId]" => "[winlog][event_data][TerminalSessionId]"
        "[raw][Level]" => "[rule][level]"
        "[raw][RecordID]" => "[winlog][record_id]"
        "[raw][RuleID]" => "[rule][id]"
        "[raw][RuleTitle]" => "[rule][name]"
      }
      copy => {
        "[winlog][computer_name]" => "[host][hostname]"
        "[winlog][event_data][Description]" => "[process][pe][description]"
        "[winlog][process][pid]" => "[process][pid]"
        "[winlog][event_data][Product]" => "[process][pe][product]"
        "[winlog][event_data][MemberSid]" => "[process][source][entity_id]"
#TODO NEED A LOT MORE COPY ACTIONS HERE
        # "[winlog][provider_name]" => "[event][provider]"
        # "[event][task]" => "[event][action]"
        # "[winlog][event_data][Company]" => "[process][pe][company]"
        # "[winlog][user][identifer]" => "[user][id]"
        # "[winlog][user][domain]" => "[user][domain]"
      }  
    }

    # establish directionality
    # TODO: this may be broken due to the first conditional and how it handles booleans. ugh.
    if [raw][Details][Initiated] {
      if [raw][Details][Initiated] == 'true' { 
        mutate {
          add_field => { "[network][direction]" => "egress" }
        }
      } else if [raw][Details][Initated] == 'false' {
        mutate {
          add_field => { "[network][direction]" => "ingress" }
        }
      }
    }

    if [raw][Details][Rule] {
      mutate {
        split => { "[raw][Details][Rule]" => "," }
        merge => { "[rule][name]" => "[raw][Details][Rule]" }
      }
    }
    # Split these into their individual hash type fields
    if [raw][Details][Hashes] {
      kv {
        source => "[raw][Details][Hashes]"
        target => "[@metadata][kvhashes]"
        field_split => ","
      }
      if [@metadata][kvhashes] {
        mutate {
          rename => {
            "[@metadata][kvhashes][MD5]" => "[process][hash][md5]"
            "[@metadata][kvhashes][SHA256]" => "[process][hash][sha256]"
            "[@metadata][kvhashes][IMPHASH]" => "[process][pe][imphash]"
          }
        }

        if [process][hash][md5] { mutate { merge => { "[related][hash]" => "[process][hash][md5]" } } }
        if [process][hash][sha256] { mutate { merge => { "[related][hash]" => "[process][hash][sha256]" } } }
        if [process][pe][imphash] { mutate { merge => { "[related][hash]" => "[process][pe][imphash]" } } }
      }
    }

    if [@metadata][User] {
      grok {
        patterns_dir => [ "/usr/local/sof-elk/grok-patterns" ]
        match => { "[@metadata][User]" => [
          "%{WINDOMAIN:[winlog][user][domain]}[\\/]%{WINUSER:[winlog][user][name]}"
          ]
        }
        tag_on_failure => [ "_grokparsefail_6650-01"]
      }
      mutate { merge => { "[related][user]" => "[winlog][user][name]" } }
    }
    
    if [@metadata][CreationUtcTime] {
      date {
        match => [ "[@metadata][CreationUtcTime]", "ISO8601" ]
        target => "[winlog][event_data][CreationUtcTime]"
      }
    }
    if [@metadata][PreviousCreationUtcTime] {
      date {
        match => [ "[@metadata][PreviousCreationUtcTime]", "ISO8601" ]
        target => "[winlog][event_data][PreviousCreationUtcTime]"
      }
    }
    if [@metadata][NewCreationUtcTime] {
      date {
        match => [ "[@metadata][NewCreationUtcTime]", "ISO8601" ]
        target => "[winlog][event_data][PreviousCreationUtcTime]"
      }
    }

    # convert numbers in hex notation to integers
    if [winlog][event_data][ProcessId] and [winlog][event_data][ProcessId] =~ "^0x" {
      ruby { 
        path => "/usr/local/sof-elk/supporting-scripts/hex_to_integer.rb"
        script_params => {
          "source_field" => "[winlog][event_data][ProcessId]"
        }
        tag_on_exception => "_rubexception-hex-logonid"
      }
    }

    mutate {
      convert => {
        "[process][client][StartKey]" => "integer"
        "[process][client][pid]" => "integer"
        "[process][parent][pid]" => "integer"
        "[process][pid]" => "integer"
        "[winlog][event_id]" => "integer"
        "[winlog][process][pid]" => "integer"
        "[winlog][record_id]" => "integer"
        "[winlog][event_data][IntegrityLevel]" => "integer"
        "[winlog][event_data][Signed]" => "boolean"
      }
      remove_field => [ "raw" ]
    }
  }
}

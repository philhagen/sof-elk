# SOF-ELKÂ® Configuration File
# (C)2025 Lewes Technology Consulting, LLC
#
# This file contains filters, transforms, and enrichments for basic syslog parsing

filter {
  if [labels][type] == "syslog" {
    if "process_live" in [tags] {
      mutate {
        copy => {
          "[host][hostname]" => "[log][syslog][hostname]"
          "[process][name]" => "[log][syslog][appname]"
          "[process][pid]" => "[log][syslog][procid]"
        }
      }
    }

    # Check if syslog message has PRI.  If so then :
    #  strip the syslog PRI part and create facility and severity fields.
    #  the extracted PRI is available in the %{[log][syslog][priority]} field.
    #
    #  You get %{[log][syslog][facility][code]} and %{[log][syslog][severity][code]} fields.
    #  You also get %{[log][syslog][facility][name]} and %{[log][syslog][severity][name]} fields if the
    #  use_labels option is set True (the default) on syslog_pri filter.
    # Also parse anything tagged with a syslog grok failure to try and recover
    #  anything that the core parser could not.
    if "process_archive" in [tags] or "_grokparsefailure_sysloginput" in [tags] {
      if [message] =~ /^<\d+>/ {
        grok {
          match => { "message" => [
            "<%{POSINT:[log][syslog][priority]}>%{SPACE}%{GREEDYDATA:message}"
          ] }
          overwrite => [ "message" ]
          tag_on_failure => [ "_grokparsefailure_1100-01" ]
        }

        if [log][syslog][priority] and [message] == "" {
          mutate {
            replace => { "message" => "<null message>" }
            add_tag => [ "null_sl01" ]
          }
        }
      }

      # strip the syslog timestamp and force event timestamp to be the same.
      # the original string is saved in field %{syslog_timestamp}.
      # the original logstash input timestamp is saved in field %{received_at}.
      grok {
        patterns_dir => [ "/usr/local/sof-elk/grok-patterns" ]
        match => { "message" => [
          "%{FULLSYSLOGTIMESTAMP:syslog_timestamp}%{SPACE}%{GREEDYDATA:message}"
        ] }
        overwrite => [ "message" ]
        add_field => { "received_at" => "%{@timestamp}" }
        tag_on_failure => [ "_grokparsefailure_1100-01" ]
      }

      # only try pulling year from path if we encountered a default syslog timestamp - not if it's full ISO8601
      if [default_syslog_timestamp] and [default_syslog_timestamp] != '' {
        grok {
          match => { "[log][file][path]" => [
            "\/%{YEAR:path_year}\/"
          ] }
          add_tag => [ "found_path_year" ]
          tag_on_failure => [ "_grokparsefailure_1100-03" ]
        }

        if "found_path_year" in [tags] {
          mutate {
            replace => { "syslog_timestamp" => "%{syslog_timestamp} %{path_year}" }
            remove_field => "path_year"
          }
        }

        mutate {
          remove_field => "default_syslog_timestamp"
        }
      }

      if [syslog_timestamp] and [message] == "" {
        mutate {
          replace => { "message" => "<null message>" }
          add_tag => [ "null_sl02" ]
        }
      }

      if [syslog_timestamp] {
        date {
          # season to taste for your own syslog format(s)
          # ISO8601/RFC3339 via rsyslog is "2016-05-10T01:49:03.863938+00:00"
          match => [ "syslog_timestamp", "MMM dd HH:mm:ss", "MMM  d HH:mm:ss", "ISO8601", "MMM dd HH:mm:ss yyyy", "MMM  d HH:mm:ss yyyy" ]
        }

        mutate {
          remove_field => [ "syslog_timestamp" ]
        }
      }

      # strip the host field from the syslog line.
      # the extracted host field becomes the logstash %{host} metadata
      # and is also available in the field %{[log][syslog][hostname]}.
      grok {
        patterns_dir => [ "/usr/local/sof-elk/grok-patterns" ]
        match => { "message" => [
          "%{SYSLOGHOST:[log][syslog][hostname]}%{SPACE}%{GREEDYDATA:message}"
        ] }
        overwrite => [ "message" ]
        tag_on_failure => [ "_grokparsefailure_1100-04" ]
      }

      if [log][syslog][hostname] and [message] == "" {
        mutate {
          replace => { "message" => "<null message>" }
          add_tag => [ "null_sl03" ]
        }
      }

      if "snare_log" not in [tags] {
        # strip the program and optional pid field from the syslog line.
        # available in the field %{[log][syslog][appname]} and %{[log][syslog][procid]}.
        # note that we do NOT do this for live syslog, as the value has already been provided by the syslog input handler
        grok {
          patterns_dir => [ "/usr/local/sof-elk/grok-patterns" ]
          match => { "message" => [
            "^%{PROG:[log][syslog][appname]}(?:\[%{POSINT:[log][syslog][procid]}\])?:?%{SPACE}%{GREEDYDATA:message}" 
          ] }
          overwrite => [ "message" ]
          tag_on_failure => [ "_grokparsefailure_1100-05" ]
        }

        if [log][syslog][appname] and [message] == "" {
          mutate {
            replace => { "message" => "<null message>" }
            add_tag => [ "null_sl04" ]
          }
        }
      }

      # remove this since we've manually parsed out the syslog fields
      mutate {
        remove_tag => [ "_grokparsefailure_sysloginput" ]
      }
    }

    mutate {
      lowercase => [
        "[log][syslog][hostname]",
        "[log][syslog][appname]",
        "[log][syslog][facility][name]",
        "[log][syslog][severity][name]"
      ]
    }

    # the ":" character seems to be retained and shouldn't be
    # not sure if wrapping this in a conditional is helpful or harmful to performance
    if [log][syslog][appname] =~ ":$" {
      mutate {
        gsub => [ "[log][syslog][appname]", ":$", "" ]
      }
    }
  }
}

# SOF-ELKÂ® Configuration File
# (C)2025 Lewes Technology Consulting, LLC
#
# This file contains filters, transforms, and enrichments for EVTX logs parsed with the KAPE forensic tool

filter {
  if [labels][type] == "kape_evtxlogs" {
    if [raw][Payload] {
      json {
        source => "[raw][Payload]"
        target => "payload_json"
      }
    }

    if [payload_json][EventData] == '' {
      # do nothing, as we dont need to handle an empty field and the [payload_json] superfield will be removed later
      # mutate {
      #   remove_field => [ "[payload_json][EventData]" ]
      # }

    } else if [payload_json][EventData][Data] {
      if [payload_json][EventData][Data] == '' {
        # do nothing - same logic as above
        # mutate {
        #   remove_field => [ "[payload_json][EventData][Data]" ]
        # }

      } else if [payload_json][EventData][Data][@Name] or [payload_json][EventData][Data][0][@Name] {
        # If there are payload_json.EventData.Data subfields, they are not in field:value form.  This will
        # convert the [ { "name": "foo, "value": "bar" } ] array to [ { "foo": "bar" } ] form
        ruby {
          path => "/usr/local/sof-elk/supporting-scripts/split_kv_to_fields.rb"
          script_params => {
            "source_field" => "[payload_json][EventData][Data]"
            "destination_field" => "[winlog][payload][event_data]"
            "key_field" => "@Name"
            "val_field" => "#text"
          }
        }

      } else {
        # this will occur if [payload_json][EventData][Data] is just a string,
        # which needs to be pushed into a subfield or an exception will occur
        # since it'll be inconsistent with other objects in the index
        mutate {
          rename => { "[payload_json][EventData][Data]" => "[winlog][payload][event_data][string]" }
        }

        # now split on ", " in case there are multiple string values
        mutate {
          split => { "[winlog][payload][event_data][string]" => ", " }
        }
      }
    }

    if [payload_json][EventData][Binary] {
      if [payload_json][EventData][Binary] == '' {
        # do nothing - same logic as above
        # mutate {
        #   remove_field => [ "[payload_json][EventData][Binary]" ]
        # }

      } else {
        mutate {
          rename => { "[payload_json][EventData][Binary]" => "[winlog][payload][event_data][binary]" }
        }
      }
    }

    # reparent [payload_json][UserData], if present
    if [payload_json][UserData] {
      if [payload_json][UserData] == '' {
        # do nothing - same logic as above
        # mutate {
        #   remove_field => [ "[payload_json][UserData]" ]
        # }

      } else {
        mutate {
          rename => { "[payload_json][UserData]" => "[winlog][payload][user_data]" }
        }
      }
    }

    mutate {
      # promote the fields of interest out of the [raw] placeholder
      # then, remove the [raw] placeholder
      rename => {
        "[raw][Level]" => "[kape][log_level]"
        "[raw][MapDescription]" => "[kape][map_description]"
        "[raw][ExecutableInfo]" => "[kape][executable_info]"

        "[raw][Computer]" => "[winlog][computer_name]"
        "[raw][RemoteHost]" => "[winlog][remote_host]"
        "[raw][UserId]" => "[winlog][user][identifier]"
        "[raw][UserName]" => "[winlog][user][name]"
        "[raw][Channel]" => "[winlog][channel]"
        "[raw][Provider]" => "[winlog][provider_name]"
        "[raw][EventId]" => "[winlog][event_id]"
        "[raw][ProcessId]" => "[winlog][process][pid]"
        "[raw][ThreadId]" => "[winlog][process][thread][id]"
        "[raw][SourceFile]" => "[file][source_file]"
        "[raw][TimeCreated]" => "[winlog][time_created]"
        "[raw][RecordNumber]" => "[winlog][record_id]"
        "[raw][Keywords]" => "[winlog][keywords]"

        "[payload_json][ActionName]" =>  "[winlog][event_data][ActionName]"
        "[payload_json][EnginePID]" =>  "[winlog][event_data][EnginePid]"
        "[payload_json][InstanceId]" =>  "[winlog][event_data][InstanceId]"
        "[payload_json][Path]" =>  "[winlog][event_data][Path]"
        "[payload_json][Priority]" =>  "[winlog][event_data][Priority]"
        "[payload_json][ProcessId]" =>  "[winlog][event_data][ProcessId]"
        "[payload_json][QueuedTaskInstanceId]" =>  "[winlog][event_data][QueuedTaskInstanceId]"
        "[payload_json][ResultCode]" =>  "[winlog][event_data][ResultCode]"
        "[payload_json][RunningTaskInstanceId]" =>  "[winlog][event_data][RunningTaskInstanceId]"
        "[payload_json][TaskInstanceId]" =>  "[winlog][event_data][TaskInstanceId]"
        "[payload_json][TaskName]" =>  "[winlog][event_data][TaskName]"
        "[payload_json][UserContext]" =>  "[winlog][event_data][UserContext]"
        "[payload_json][UserName]" =>  "[winlog][event_data][UserName]"
      }
    }

    if [raw][PayloadData1] {
      grok {
        match => { "[raw][PayloadData1]" => [
          "%{WORD:name}: %{GREEDYDATA:value}"
        ] }
        add_tag => [ "payload_found" ]
        tag_on_failure => [ "_grokparsefail_6504-01"]
      }
      if "payload_found" in [tags] {
        # note that because of dependencies from one mutate{} operation to the next,
        # these cannot go into a single stanza and must use three separate mutate{}s
        if ![name] {
          mutate {
            add_field => { "name" => "Content1" }
          }
        }
        mutate {
          add_field => { "[winlog][payload_data][%{name}]" => "%{[value]}" }
        }
        mutate {
          remove_field => [ "name", "value" ]
          remove_tag => [ "payload_found" ]
        }
      }
    }
    if [raw][PayloadData2] {
      grok {
        match => { "[raw][PayloadData2]" => [
          "%{WORD:name}: %{GREEDYDATA:value}"
        ] }
        add_tag => [ "payload_found" ]
        tag_on_failure => [ "_grokparsefail_6504-02"]
      }
      if "payload_found" in [tags] {
        if ![name] {
          mutate { add_field => { "name" => "Content2" } }
        }
        mutate {
          add_field => { "[winlog][payload_data][%{name}]" => "%{[value]}" }
        }
        mutate {
          remove_field => [ "name", "value" ]
          remove_tag => [ "payload_found" ]
        }
      }
    }
    if [raw][PayloadData3] {
      grok {
        match => { "[raw][PayloadData3]" => [
          "%{WORD:name}: %{GREEDYDATA:value}"
        ] }
        add_tag => [ "payload_found" ]
        tag_on_failure => [ "_grokparsefail_6504-03"]
      }
      if "payload_found" in [tags] {
        if ![name] {
          mutate { add_field => { "name" => "Content3" } }
        }
        mutate {
          add_field => { "[winlog][payload_data][%{name}]" => "%{[value]}" }
        }
        mutate {
          remove_field => [ "name", "value" ]
          remove_tag => [ "payload_found" ]
        }
      }
    }
    if [raw][PayloadData4] {
      grok {
        match => { "[raw][PayloadData4]" => [
          "%{WORD:name}: %{GREEDYDATA:value}"
        ] }
        add_tag => [ "payload_found" ]
        tag_on_failure => [ "_grokparsefail_6504-04"]
      }
      if "payload_found" in [tags] {
        if ![name] {
          mutate { add_field => { "name" => "Content4" } }
        }
        mutate {
          add_field => { "[winlog][payload_data][%{name}]" => "%{[value]}" }
        }
        mutate {
          remove_field => [ "name", "value" ]
          remove_tag => [ "payload_found" ]
        }
      }
    }
    if [raw][PayloadData5] {
      grok {
        match => { "[raw][PayloadData5]" => [
          "%{WORD:name}: %{GREEDYDATA:value}"
        ] }
        add_tag => [ "payload_found" ]
        tag_on_failure => [ "_grokparsefail_6504-05"]
      }
      if "payload_found" in [tags] {
        if ![name] {
          mutate { add_field => { "name" => "Content5" } }
        }
        mutate {
          add_field => { "[winlog][payload_data][%{name}]" => "%{[value]}" }
        }
        mutate {
          remove_field => [ "name", "value" ]
          remove_tag => [ "payload_found" ]
        }
      }
    }
    if [raw][PayloadData6] {
      grok {
        match => { "[raw][PayloadData6]" => [
          "%{WORD:name}: %{GREEDYDATA:value}"
        ] }
        add_tag => [ "payload_found" ]
        tag_on_failure => [ "_grokparsefail_6504-06"]
      }
      if "payload_found" in [tags] {
        if ![name] {
          mutate { add_field => { "name" => "Content6" } }
        }
        mutate {
          add_field => { "[winlog][payload_data][%{name}]" => "%{[value]}" }
        }
        mutate {
          remove_field => [ "name", "value" ]
          remove_tag => [ "payload_found" ]
        }
      }
    }

    # use the TimeCreated field for the timestamp
    date {
      match => [ "[winlog][time_created]", "ISO8601" ]
    }

    # some remotehost fields will be ip:port format.  if so, pull those out to distinct fields.
    if [winlog][remote_host] {
      grok {
        patterns_dir => [ "/usr/local/sof-elk/grok-patterns" ]
        match => { "[winlog][remote_host]" => "%{IP:[remote][ip]}(?::%{INT:[remote][port]})?"}
        tag_on_failure => [ "_grokparsefail_6504-07"]
      }
    }

    # split keywords into an array
    mutate {
      split => { "[winlog][keywords]" => ", " }
    }

    # construct a message field
    if [kape][map_description] {
      mutate {
        replace => { "message" => "KAPE map used: %{[kape][map_description]}" }
      }
    } else {
      mutate {
        replace => { "message" => "No event summary available" }
      }
    }

    # clean up the record
    mutate {
      remove_field => [ "raw", "payload_json" ]
    }
  }
}

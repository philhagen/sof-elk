# SOF-ELKÂ® Configuration File
# (C)2022 Pierre Lidome and Arjun Bhardwaj
# (C)2024 SOF-ELK integrations and additional parsing features by Lewes Technology Consulting, LLC
#
# This file parses JSON-formatted Microsoft 365 UAL files in UTF-8 encoding
# For some versions of PowerShell, this may require manually specifying the encoding in the "out-file" scriptlet such as:
#   search-unifiedauditlog -StartDate 2022-12-01 -EndDate 2023-01-10 -ResultSize 5000 -SessionCommand ReturnNextPreviewPage | Select-Object -ExpandProperty AuditData | out-file -Encoding UTF8 "202201090807ual_All.json"
# reference: https://learn.microsoft.com/en-us/office/office-365-management-api/office-365-management-activity-api-schema#common-schema
#            https://www.elastic.co/guide/en/beats/filebeat/current/exported-fields-o365.html

filter {
  if [labels][type] == "microsoft365" {
    # matching the timestamp to the time of the event occurence.  CreationTime is a field that is pulled from the AuditData JSON
    date {
      match => [ "[raw][CreationTime]", "ISO8601" ]
    }

    # matching source IP from the field ClientIP
    if [raw][ClientIP] {
      grok {
        patterns_dir => [ "/usr/local/sof-elk/grok-patterns" ]
        match => {
          "[raw][ClientIP]" => [ "\[?%{IP:[source][ip]}\]?(?::%{INT:[client][port]})?" ]
        }
        tag_on_failure => [ "_grokparsefail_6701-01"]
      }
    }
    # matching against ClientIPAddress or ActorIpAddress
    if [raw][ClientIPAddress] or [raw][ActorIpAddress] {
      grok {
        patterns_dir => [ "/usr/local/sof-elk/grok-patterns" ]
        match => {
          "[raw][ClientIPAddress]" => [ "\[?%{IP:[source][ip]}\]?(?::%{INT:[source][port]})?" ]
          "[raw][ActorIpAddress]" => [ "\[?%{IP:[source][ip]}\]?(?::%{INT:[source][port]})?" ]
        }
        tag_on_failure => [ "_grokparsefail_6701-02"]
      }
    }

    # Initially, restructure data in-place within the [raw] object.
    # At the end of this parser, [raw] is renamed to [o365][audit]

    # Break out the Parameters into their Name:Value assignments
    if [raw][Parameters] and ![raw][Parameters][0][Name] {
      # this occasionally occurs when [Parameters] is a string or an array of strings
      mutate {
        add_field => { "[raw][Parameters][flag]" => "%{[raw][Parameters]}" }
      }
    } else if [raw][Parameters] {
      ruby {
        path => "/usr/local/sof-elk/supporting-scripts/split_kv_to_fields.rb"
        script_params => {
          "source_field" => "[raw][Parameters]"
          "destination_field" => "[raw][Parameters]"
          "key_field" => "Name"
          "val_field" => "Value"
        }
      }
    }

    # Break out the OperationProperties into their Name:Value assignments
    if [raw][OperationProperties] {
      ruby {
        path => "/usr/local/sof-elk/supporting-scripts/split_kv_to_fields.rb"
        script_params => {
          "source_field" => "[raw][OperationProperties]"
          "destination_field" => "[raw][OperationProperties]"
          "key_field" => "Name"
          "val_field" => "Value"
        }
      }
    }

    # Break out the ExtendedProperties into their Name:Value assignments
    if [raw][ExtendedProperties] {
      ruby {
        path => "/usr/local/sof-elk/supporting-scripts/split_kv_to_fields.rb"
        script_params => {
          "source_field" => "[raw][ExtendedProperties]"
          "destination_field" => "[raw][ExtendedProperties]"
          "key_field" => "Name"
          "val_field" => "Value"
        }
      }
    }
    if [raw][extended_properties][UserAgent] {
      mutate {
        rename => {
          "[raw][ExtendedProperties][UserAgent]" => "[user_agent][original]"
        }
      }
    }

    # Break out the DeviceProperties into their Name:Value assignments
    if [raw][DeviceProperties] {
      ruby {
        path => "/usr/local/sof-elk/supporting-scripts/split_kv_to_fields.rb"
        script_params => {
          "source_field" => "[raw][DeviceProperties]"
          "destination_field" => "[raw][DeviceProperties]"
          "key_field" => "Name"
          "val_field" => "Value"
        }
      }
    }

    # Break out the ModfiedProperties array to a kv-multi
    if [raw][ModifiedProperties] and ![raw][ModifiedProperties][0][Name] {
      # this occasionally occurs when [ModifiedProperties] is a string or an array of strings
      mutate {
        add_field => { "[raw][ModifiedProperties][flag]" => "%{[raw][ModifiedProperties]}" }
      }
    } else if [raw][ModifiedProperties] {
      ruby {
        path => "/usr/local/sof-elk/supporting-scripts/split_kv_multi_to_fields.rb"
        script_params => {
          "source_field" => "[raw][ModifiedProperties]"
          "destination_field" => "[raw][ModifiedProperties]"
          "key_field" => "Name"
        }
      }
    }

    # reparent the entire [raw] object to [o365][audit] to match ECS
    mutate {
      rename => {
        "[raw]" => "[o365][audit]"
      }
    }
  }
}

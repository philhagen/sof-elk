# SOF-ELK® Configuration File
# (C)2025 Lewes Technology Consulting, LLC
#
# This file contains preprocessing steps for records created by Yamato Security's Hayabusa tool
# It builds upon content initially created by @bedangSen

filter {
  if [labels][type] == "hayabusa" {
    if "csv" in [tags] {
      csv {
        separator => ","
        skip_empty_rows => "true"
        skip_header => "true"
        # this matches the "standard" output format for both the native v3.3.0 binary as well as KAPE's hayabusa_OfflineEventLogs module
        # see https://github.com/Yamato-Security/hayabusa/blob/dc07c131098a92510435b669ea05dcdbe3954cfd/config/profiles.yaml#L12-L22
        # any other output formats would require unique identification and special handling
        columns => [ "Timestamp", "RuleTitle", "Level", "Computer", "Channel", "EventID", "RecordID", "OrigDetails", "OrigExtraFieldInfo", "RuleID" ]
        target => "raw"
      }

      if [raw][Timestamp] == "Timestamp" {
        drop {}  # drop the first line that contains the column names
      }

      mutate {
        gsub => [
          # protect quotes since we use the kv processor below
          "OrigDetails", "\"", "'",
          "OrigExtraFieldInfo, "\"", "'"
        ]
      }

      if [raw][OrigDetails] {
        kv {
          field_split => " ¦ "        # Split the field based on the " ¦ " delimiter
          value_split => ": "         # Split the key-value pairs based on ": " delimiter
          trim_key => " "             # Trim leading and trailing spaces from keys
          trim_value => " "           # Trim leading and trailing spaces from values
          source => "[raw][OrigDetails]"  # Specify the field to parse
          target => "[raw][Details]"  # Assign the parsed values to a new field

          remove_field => [ "[raw][OrigDetails]" ]
        }
      }

      if [raw][OrigExtraFieldInfo] {
        kv {
          field_split => " ¦ "        # Split the field based on the " ¦ " delimiter
          value_split => ": "         # Split the key-value pairs based on ": " delimiter
          trim_key => " "             # Trim leading and trailing spaces from keys
          trim_value => " "           # Trim leading and trailing spaces from values
          source => "[raw][OrigExtraFieldInfo]"  # Specify the field to parse
          target => "[raw][ExtraFieldInfo]"  # Assign the parsed values to a new field

          remove_field => [ "[raw][OrigExtraFieldInfo]" ]
        }
      }

      mutate {
        remove_tag => [ "csv" ]
      }

    # } else {
      ### TODO: JSON-ONLY STUFF IF NEEDED

    }
    date {
      match => [ "[raw][Timestamp]", "ISO8601", "yyyy-MM-dd HH:mm:ss.SSS ZZ" ]
    }
  }
}

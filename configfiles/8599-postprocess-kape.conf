# SOF-ELKÂ® Configuration File
# (C)2025 Lewes Technology Consulting, LLC
#
# This file contains postprocessing for logs parsed with the KAPE forensic tool

filter {
  if [labels][type] =~ /^kape_/ {

    # convert file.attributes to an array
    if [file][attributes] {
      ruby {
        path => "/usr/local/sof-elk/supporting-scripts/ntfs_flags_to_array.rb"
        script_params => {
          "source_field" => "[file][attributes]"
          "source_type" => "[@metadata][attribute_type]"
        }
      }
      # force this to be a string since it might be either a string or an integer
      mutate {
        convert => {
          "[file][attributes][_rawvalue]" => "string"
        }
      }
    }

    # tweak known inconsistent timestamps so Elasticsearch can parse them
    if [winlog][payload][event_data][SystemTime] {
      mutate {
        gsub => [ "[winlog][payload][event_data][SystemTime]", " ", "T" ]
      }
    }
    if [winlog][payload][event_data][LoaderTime] {
      mutate {
        gsub => [ "[winlog][payload][event_data][LoaderTime]", " ", "T" ]
      }
    }
    if [winlog][payload][event_data][OldTime] {
      mutate {
        gsub => [ "[winlog][payload][event_data][OldTime]", " ", "T" ]
      }
    }
    if [winlog][payload][event_data][NewTime] {
      mutate {
        gsub => [ "[winlog][payload][event_data][NewTime]", " ", "T" ]
      }
    }

    if [labels][type] == "kape_filesystem" {
      # if this is a directory, set values accordingly; otherwise set file status
      if [@metadata][isDirectory] == "true" {
        mutate {
          add_field => {
            "[file][attributes][directory]" => true
            "[file][type]" => "dir"
          }
        }

      } else {
        mutate {
          add_field => {
            "[file][type]" => "file"
          }
        }
      }
    }

    # rename anything left and make copies as needed to satisfy ECS needs
    mutate {
      copy => {
        "[winlog][user][identifer]" => "[user][id]"
      }
    }

    # clean up the record
    mutate {
      remove_field => [ "raw" ]
    }
  }
}

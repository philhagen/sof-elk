# SOF-ELKÂ® Configuration File
# (C)2023 Lewes Technology Consulting, LLC
#
# This file contains transforms and enrichments to be applied in postprocessing

filter {
  if [source_ip] {
    if [source_ip] == "-" {
      mutate { replace => { "source_ip" => "0.0.0.0" } }
    }
    geoip {
      database => "/usr/local/share/GeoIP/GeoLite2-ASN.mmdb"
      default_database_type => "ASN"
      source => "[source_ip]"
      target => "[source_geo]"
    }
    geoip {
      database => "/usr/local/share/GeoIP/GeoLite2-City.mmdb"
      source => "[source_ip]"
      target => "[source_geo]"
    }
    mutate { merge => { "ips" => "source_ip" } }
    # cidr {
    #   address => [ "%{source_ip}" ]
    #   network => [ "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "fc00::/7" ]
    #   add_tag => [ "netblock_private", "netblock_rfc1918" ]
    # }
    # cidr {
    #   address => [ "%{source_ip}" ]
    #   network => [ "169.254.0.0/16", "fe80::/10" ]
    #   add_tag => [ "netblock_linklocal" ]
    # }
    # cidr {
    #   address => [ "%{source_ip}" ]
    #   network => [ "224.0.0.0/4", "ff00::/8" ]
    #   add_tag => [ "netblock_multicast" ]
    # }
    # cidr {
    #   address => [ "%{source_ip}" ]
    #   network => [ "127.0.0.0/8", "::1/128" ]
    #   add_tag => [ "netblock_loopback" ]
    # }
  }

  # generally just for netflow, which sets source_as to 0 on a non-AS-aware exporter
  if [source_geo][asn] and [source_as] == 0 {
    mutate { replace => { "source_as" => "%{[source_geo][asn]}" } }
    mutate { gsub => [ "source_as", "^AS", "" ] }
    mutate { convert => { "source_as" => "integer" } }
  }

  if [destination_ip] {
    if [destination_ip] == "-" { mutate { replace => { "destination_ip" => "0.0.0.0" } } }
    geoip {
      database => "/usr/local/share/GeoIP/GeoLite2-ASN.mmdb"
      default_database_type => "ASN"
      source => "[destination_ip]"
      target => "[destination_geo]"
    }
    geoip {
      database => "/usr/local/share/GeoIP/GeoLite2-City.mmdb"
      source => "[destination_ip]"
      target => "[destination_geo]"
    }
    mutate { merge => { "ips" => "destination_ip" } }
    # cidr {
    #   address => [ "%{destination_ip}" ]
    #   network => [ "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "fc00::/7" ]
    #   add_tag => [ "netblock_private", "netblock_rfc1918" ]
    # }
    # cidr {
    #   address => [ "%{destination_ip}" ]
    #   network => [ "169.254.0.0/16", "fe80::/10" ]
    #   add_tag => [ "netblock_linklocal" ]
    # }
    # cidr {
    #   address => [ "%{destination_ip}" ]
    #   network => [ "224.0.0.0/4", "ff00::/8" ]
    #   add_tag => [ "netblock_multicast" ]
    # }
    # cidr {
    #   address => [ "%{destination_ip}" ]
    #   network => [ "127.0.0.0/8", "::1/128" ]
    #   add_tag => [ "netblock_loopback" ]
    # }
  }

  # generally just for netflow, which sets destination_as to 0 on a non-AS-aware exporter
  if [destination_geo][asn] and [destination_as] == 0 {
    mutate { replace => { "destination_as" => "%{[destination_geo][asn]}" } }
    mutate { gsub => [ "destination_as", "^AS", "" ] }
    mutate { convert => { "destination_as" => "integer" } }
  }

  if [answer_ip] {
    geoip {
      database => "/usr/local/share/GeoIP/GeoLite2-ASN.mmdb"
      default_database_type => "ASN"
      source => "[answer_ip]"
      target => "[answer_geo]"
    }
    geoip {
      database => "/usr/local/share/GeoIP/GeoLite2-City.mmdb"
      source => "[answer_ip]"
      target => "[answer_geo]"
    }
    mutate { merge => { "ips" => "answer_ip" } }
    # cidr {
    #   address => [ "%{answer_ip}" ]
    #   network => [ "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "fc00::/7" ]
    #   add_tag => [ "netblock_private", "netblock_rfc1918" ]
    # }
    # cidr {
    #   address => [ "%{answer_ip}" ]
    #   network => [ "169.254.0.0/16", "fe80::/10" ]
    #   add_tag => [ "netblock_linklocal" ]
    # }
    # cidr {
    #   address => [ "%{answer_ip}" ]
    #   network => [ "224.0.0.0/4", "ff00::/8" ]
    #   add_tag => [ "netblock_multicast" ]
    # }
    # cidr {
    #   address => [ "%{answer_ip}" ]
    #   network => [ "127.0.0.0/8", "::1/128" ]
    #   add_tag => [ "netblock_loopback" ]
    # }
  }

  if [client_ip] {
    if [client_ip] == "-" { mutate { replace => { "client_ip" => "0.0.0.0" } } }
    geoip {
      database => "/usr/local/share/GeoIP/GeoLite2-ASN.mmdb"
      default_database_type => "ASN"
      source => "[client_ip]"
      target => "[client_geo]"
    }
    geoip {
      database => "/usr/local/share/GeoIP/GeoLite2-City.mmdb"
      source => "[client_ip]"
      target => "[client_geo]"
    }
    mutate { merge => { "ips" => "client_ip" } }
    # cidr {
    #   address => [ "%{client_ip}" ]
    #   network => [ "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "fc00::/7" ]
    #   add_tag => [ "netblock_private", "netblock_rfc1918" ]
    # }
    # cidr {
    #   address => [ "%{client_ip}" ]
    #   network => [ "169.254.0.0/16", "fe80::/10" ]
    #   add_tag => [ "netblock_linklocal" ]
    # }
    # cidr {
    #   address => [ "%{client_ip}" ]
    #   network => [ "224.0.0.0/4", "ff00::/8" ]
    #   add_tag => [ "netblock_multicast" ]
    # }
    # cidr {
    #   address => [ "%{client_ip}" ]
    #   network => [ "127.0.0.0/8", "::1/128" ]
    #   add_tag => [ "netblock_loopback" ]
    # }
  }

  if [remote_ip] {
    geoip {
      database => "/usr/local/share/GeoIP/GeoLite2-ASN.mmdb"
      default_database_type => "ASN"
      source => "[remote_ip]"
      target => "[remote_geo]"
    }
    geoip {
      database => "/usr/local/share/GeoIP/GeoLite2-City.mmdb"
      source => "[remote_ip]"
      target => "[remote_geo]"
    }
    mutate { merge => { "ips" => "remote_ip" } }
    # cidr {
    #   address => [ "%{remote_ip}" ]
    #   network => [ "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "fc00::/7" ]
    #   add_tag => [ "netblock_private", "netblock_rfc1918" ]
    # }
    # cidr {
    #   address => [ "%{remote_ip}" ]
    #   network => [ "169.254.0.0/16", "fe80::/10" ]
    #   add_tag => [ "netblock_linklocal" ]
    # }
    # cidr {
    #   address => [ "%{remote_ip}" ]
    #   network => [ "224.0.0.0/4", "ff00::/8" ]
    #   add_tag => [ "netblock_multicast" ]
    # }
    # cidr {
    #   address => [ "%{remote_ip}" ]
    #   network => [ "127.0.0.0/8", "::1/128" ]
    #   add_tag => [ "netblock_loopback" ]
    # }
  }

  if [backend_ip] {
    if [backend_ip] == "-" { mutate { replace => { "backend_ip" => "0.0.0.0" } } }
    geoip {
      database => "/usr/local/share/GeoIP/GeoLite2-ASN.mmdb"
      default_database_type => "ASN"
      source => "[backend_ip]"
      target => "[backend_geo]"
    }
    geoip {
      database => "/usr/local/share/GeoIP/GeoLite2-City.mmdb"
      source => "[backend_ip]"
      target => "[backend_geo]"
    }
    mutate { merge => { "ips" => "backend_ip" } }
    # cidr {
    #   address => [ "%{backend_ip}" ]
    #   network => [ "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "fc00::/7" ]
    #   add_tag => [ "netblock_private", "netblock_rfc1918" ]
    # }
    # cidr {
    #   address => [ "%{backend_ip}" ]
    #   network => [ "169.254.0.0/16", "fe80::/10" ]
    #   add_tag => [ "netblock_linklocal" ]
    # }
    # cidr {
    #   address => [ "%{backend_ip}" ]
    #   network => [ "224.0.0.0/4", "ff00::/8" ]
    #   add_tag => [ "netblock_multicast" ]
    # }
    # cidr {
    #   address => [ "%{backend_ip}" ]
    #   network => [ "127.0.0.0/8", "::1/128" ]
    #   add_tag => [ "netblock_loopback" ]
    # }
  }

  if [xff_ip] {
    if [xff_ip] == "-" { mutate { replace => { "xff_ip" => "0.0.0.0" } } }
    geoip {
      database => "/usr/local/share/GeoIP/GeoLite2-ASN.mmdb"
      default_database_type => "ASN"
      source => "[xff_ip]"
      target => "[xff_geo]"
    }
    geoip {
      database => "/usr/local/share/GeoIP/GeoLite2-City.mmdb"
      source => "[xff_ip]"
      target => "[xff_geo]"
    }
    mutate { merge => { "ips" => "xff_ip" } }
    # cidr {
    #   address => [ "%{xff_ip}" ]
    #   network => [ "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "fc00::/7" ]
    #   add_tag => [ "netblock_private", "netblock_rfc1918" ]
    # }
    # cidr {
    #   address => [ "%{xff_ip}" ]
    #   network => [ "169.254.0.0/16", "fe80::/10" ]
    #   add_tag => [ "netblock_linklocal" ]
    # }
    # cidr {
    #   address => [ "%{xff_ip}" ]
    #   network => [ "224.0.0.0/4", "ff00::/8" ]
    #   add_tag => [ "netblock_multicast" ]
    # }
    # cidr {
    #   address => [ "%{xff_ip}" ]
    #   network => [ "127.0.0.0/8", "::1/128" ]
    #   add_tag => [ "netblock_loopback" ]
    # }
  }

  if [original_source_ip] {
    if [original_source_ip] == "-" { mutate { replace => { "original_source_ip" => "0.0.0.0" } } }
    geoip {
      database => "/usr/local/share/GeoIP/GeoLite2-ASN.mmdb"
      default_database_type => "ASN"
      source => "[original_source_ip]"
      target => "[original_source_geo]"
    }
    geoip {
      database => "/usr/local/share/GeoIP/GeoLite2-City.mmdb"
      source => "[original_source_ip]"
      target => "[original_source_geo]"
    }
    mutate { merge => { "ips" => "original_source_ip" } }
    # cidr {
    #   address => [ "%{original_source_ip}" ]
    #   network => [ "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "fc00::/7" ]
    #   add_tag => [ "netblock_private", "netblock_rfc1918" ]
    # }
    # cidr {
    #   address => [ "%{original_source_ip}" ]
    #   network => [ "169.254.0.0/16", "fe80::/10" ]
    #   add_tag => [ "netblock_linklocal" ]
    # }
    # cidr {
    #   address => [ "%{original_source_ip}" ]
    #   network => [ "224.0.0.0/4", "ff00::/8" ]
    #   add_tag => [ "netblock_multicast" ]
    # }
    # cidr {
    #   address => [ "%{original_source_ip}" ]
    #   network => [ "127.0.0.0/8", "::1/128" ]
    #   add_tag => [ "netblock_loopback" ]
    # }
  }

  if [original_destination_ip] {
    if [original_destination_ip] == "-" { mutate { replace => { "original_destination_ip" => "0.0.0.0" } } }
    geoip {
      database => "/usr/local/share/GeoIP/GeoLite2-ASN.mmdb"
      default_database_type => "ASN"
      source => "[original_destination_ip]"
      target => "[original_destination_geo]"
    }
    geoip {
      database => "/usr/local/share/GeoIP/GeoLite2-City.mmdb"
      source => "[original_destination_ip]"
      target => "[original_destination_geo]"
    }
    mutate { merge => { "ips" => "original_destination_ip" } }
    # cidr {
    #   address => [ "%{original_destination_ip}" ]
    #   network => [ "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "fc00::/7" ]
    #   add_tag => [ "netblock_private", "netblock_rfc1918" ]
    # }
    # cidr {
    #   address => [ "%{original_destination_ip}" ]
    #   network => [ "169.254.0.0/16", "fe80::/10" ]
    #   add_tag => [ "netblock_linklocal" ]
    # }
    # cidr {
    #   address => [ "%{original_destination_ip}" ]
    #   network => [ "224.0.0.0/4", "ff00::/8" ]
    #   add_tag => [ "netblock_multicast" ]
    # }
    # cidr {
    #   address => [ "%{original_destination_ip}" ]
    #   network => [ "127.0.0.0/8", "::1/128" ]
    #   add_tag => [ "netblock_loopback" ]
    # }
  }

  if [dhcp_ip] {
    if [dhcp_ip] == "-" { mutate { replace => { "dhcp_ip" => "0.0.0.0" } } }
    geoip {
      database => "/usr/local/share/GeoIP/GeoLite2-ASN.mmdb"
      default_database_type => "ASN"
      source => "[dhcp_ip]"
      target => "[dhcp_geo]"
    }
    geoip {
      database => "/usr/local/share/GeoIP/GeoLite2-City.mmdb"
      source => "[dhcp_ip]"
      target => "[dhcp_geo]"
    }
    mutate { merge => { "ips" => "dhcp_ip" } }
    # cidr {
    #   address => [ "%{dhcp_ip}" ]
    #   network => [ "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "fc00::/7" ]
    #   add_tag => [ "netblock_private", "netblock_rfc1918" ]
    # }
    # cidr {
    #   address => [ "%{dhcp_ip}" ]
    #   network => [ "169.254.0.0/16", "fe80::/10" ]
    #   add_tag => [ "netblock_linklocal" ]
    # }
    # cidr {
    #   address => [ "%{dhcp_ip}" ]
    #   network => [ "224.0.0.0/4", "ff00::/8" ]
    #   add_tag => [ "netblock_multicast" ]
    # }
    # cidr {
    #   address => [ "%{dhcp_ip}" ]
    #   network => [ "127.0.0.0/8", "::1/128" ]
    #   add_tag => [ "netblock_loopback" ]
    # }
  }

  # de-duplicate the [ips] array
  ruby {
    code => '
      a = event.get("ips")
      if a.is_a? Array
        event.set("ips", a.uniq)
      end'
  }

  # cleanup duplicate fields if they exist
  mutate {
    remove_field => [
      "[source_geo][ip]",
      "[destination_geo][ip]",
      "[answer_geo][ip]",
      "[client_geo][ip]",
      "[remote_geo][ip]",
      "[backend_geo][ip]",
      "[xff_geo][ip]",
      "[original_source_geo][ip]",
      "[original_destination_geo][ip]",
      "[dhcp][ip]"
    ]
  }
}

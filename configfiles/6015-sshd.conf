# SOF-ELKÂ® Configuration File
# (C)2025 Lewes Technology Consulting, LLC
#
# This file contains filters, transforms, and enrichments for SSH server messages

# Messages to handle:
## subsystem request for sftp
## reverse mapping checking getaddrinfo for ansible [192.168.75.43] failed - POSSIBLE BREAK-IN ATTEMPT!
## Address 155.94.216.106 maps to 155.94.216.106.static.quadranet.com, but this does not map back to the address - POSSIBLE BREAK-IN ATTEMPT!
## input_userauth_request: invalid user postgres
## Invalid user supervisor from 115.248.101.202 port 63030
## Unable to negotiate with 37.10.82.196 port 37351: no matching key exchange method found. Their offer: diffie-hellman-group1-sha1,diffie-hellman-group14-sha1 [preauth]
## Connection from 115.238.101.202 port 51928 on 172.31.55.66 port 22
## Disconnected from 125.65.101.202 port 59105 [preauth]
## Received disconnect from 125.65.42.182 port 59105:11:  [preauth]
## Received disconnect from 159.100.83.150 port 61771:11: disconnected by user
## Accepted publickey for root from 73.129.125.35 port 47072 ssh2: RSA SHA256:mhUQ4SJMPrQl2P4FVapnAlM2V0Vg4K8VP1fX7JMZU9U

filter {
  # SSH login messages
  if (([labels][type] == "syslog") and [log][syslog][appname] == "sshd") {
    grok {
      patterns_dir => [ "/usr/local/sof-elk/grok-patterns" ]
      match => { "message", [
        "^%{WORD:[ssh][auth_result]} %{WORD:[ssh][login_method]} for (?:%{DATA:[ssh][user_validity]} )?%{USERNAME:[user][name]} from %{IPORHOST:[source][ip]} port %{POSINT:[source][port]} %{WORD:[ssh][version]}(?:: %{WORD:[ssh][key_type]} %{GREEDYDATA:[ssh][key_id]})?$",
        "^Received disconnect from %{IPORHOST:[source][ip]}: %{NONNEGINT:[ssh][disconnect_code]}: %{GREEDYDATA:[ssh][disconnect_statement]}$",
        "^Connection closed by %{IPORHOST:[source][ip]}$",
        "message", "^Invalid user %{USER:[user][name]} from %{IPORHOST:[source][ip]}$",
        "^Invalid user %{USER:[user][name]} from %{IPORHOST:[source][ip]} port %{POSINT:[source][port]}$",
        "^Unable to negotiate with %{IP:[source][ip]} port %{POSINT:[source][port]}: %{DATA:[ssh][auth_reason]}. Their offer: %{DATA:[ssh][source_kex_methods]} \[preauth\]$",
        "^Connection from %{IPORHOST:[source][ip]} port %{POSINT:[source][port]} on %{IPORHOST:[destination][ip]} port %{POSINT:[destination][port]}$",
        "^Disconnected from %{IPORHOST:[source][ip]} port %{POSINT:[source][port]} \[preauth\]$",
        "^Received disconnect from %{IPORHOST:[source][ip]} port %{POSINT:[source][port]}:%{POSINT:[ssh][unknown_field]}:  \[preauth\]$"
      ] }
      add_tag => [ "got_ssh", "parse_done" ]
      tag_on_failure => [ "_grokparsefailure_6015-01" ]
    }
  }

  if [source_kex_methods] {
    split {
      field => "source_kex_methods"
      terminator => ","
    }
  }

  # copy auth result to generic event-grouped field
  if [ssh][auth_result] {
    mutate {
      lowercase => [ "[ssh][auth_result]" ]
      copy => { "[ssh][auth_result]" => "[event][auth_result]" }
    }
  }

  if "_grokparsefailure_sshlogin" in [tags] {
    mutate {
      remove_tag => [ "_grokparsefailure_sshlogin"]
    }
  }
}

# SOF-ELKÂ® Configuration File
# (C)2025 Lewes Technology Consulting, LLC
#
# This file contains postprocessing for HTTPD access log messages

filter {
  if [labels][type] in [ "httpdlog", "zeek_http" ] {

    if [http][request][referrer] {
      mutate {
        # remove quotes from quoted string
        gsub => [
          "[http][request][referrer]", "\"", ""
        ]
      }
    }

    # these fields are set to "-" if not present in the source record.  If so, remove them.
    if [client][user][name] == "-" { mutate { remove_field => [ "[client][user][name]" ] } }
    if [server][user][name] == "-" { mutate { remove_field => [ "[server][user][name]" ] } }
    if [aws][elb][redirect_url] == "-" { mutate { remove_field => [ "[aws][elb][redirect_url]" ] } }
    if [aws][elb][error][reason] == "-" { mutate { remove_field => [ "[aws][elb][error][reason]" ] } }
    if [aws][elb][classification] == "-" { mutate { remove_field => [ "[aws][elb][classification]" ] } }
    if [aws][elb][classification_reason] == "-" { mutate { remove_field => [ "[aws][elb][classification_reason]" ] } }

    # this may be a comma-separated list, or "-" if not present
    if [aws][elb][action_executed] {
      if [aws][elb][action_executed] == "-" {
        mutate { remove_field => [ "[aws][elb][action_executed]" ] }
      } else {
        mutate { split => { "[aws][elb][action_executed]" => "," } }
      }
    }

    # this may be a space-separated list, or "-" if not present
    if [aws][elb][target_port] {
      if [aws][elb][target_port] == "-" {
        mutate  { remove_field => [ "[aws][elb][target_port]" ] }
      } else {
        mutate { split => { "[aws][elb][target_port]" => " " } }
      }
    }

    # this may be a space-separated list, or "-" if not present
    if [aws][elb][target_status_code] {
      if [aws][elb][target_status_code] == "-" {
        mutate { remove_field => [ "[aws][elb][target_status_code]" ] }
      } else {
        mutate { split => { "[aws][elb][target_status_code]" => " " } }
      }
    }

    # [xff][ip] could be of the format 47.47.47.47,+198.198.198.198 (see #314)
    if [xff][ip] and [xff][ip] =~ ",\+" {
      mutate {
        gsub => [ "[xff][ip]", ",\+", "," ]
        split => { "[xff][ip]" => "," }
      }
    }

    if [http][request][method] == "CONNECT" {
      mutate {
        replace => { "[url][path]" => "(Tunnel setup request)" }
      }
    }

    if [destination][bytes] == "-" {
      mutate {
        replace => { "[destination][bytes]" => 0 }
      }
    }
    if [aws][s3access][object_size] == "-" {
      mutate {
        replace => { "[aws][s3access][object_size]" => 0 }
      }
    }
    if [event][duration] == "-" {
      mutate {
        replace  => { "[event][duration]" => 0 }
      }
    }
    mutate {
      convert => {
        "[http][version]" => "float"
        "[http][response][status_code]" => "integer"
        "[source][bytes]" => "integer"
        "[destination][bytes]" => "integer"
        "[aws][s3access][object_size]" => "integer"
        "[event][duration]" => "integer"
      }
    }

    # re-assemble an entire URL if all the components are there
    if [url][scheme] and [url][domain] and [url][path] {
      if [destination][port] {
        mutate {
          add_field => { "[url][original]" => "%{[url][scheme]}://%{[url][domain]}:%{[destination][port]}%{[url][path]}" }
        }
      } else {
        mutate {
          add_field => { "[url][original]" => "%{[url][scheme]}://%{[url][domain]}%{[url][path]}" }
        }
      }

      if [url][query] {
        mutate {
          replace => { "[url][original]" => "%{[url][original]}?%{[url][query]}" }
        }
      }
    }

    # look at %{[url][path]} and see if it ends in a "not page resource" extension. Issue #25.
    if [url][path] and [http][request][method] != "CONNECT" {
      grok {
        match => { "[url][path]" => [
          "%{URIPATH:requestpath}"
        ] }
        add_tag => [ "find_pagenotpage" ]
        tag_on_failure => [ "_grokparsefail_8110-01"]
      }
      if "find_pagenotpage" in [tags] {
        grok {
          match => { "requestpath" => [
            "\.(css|js|class|gif|jpg|jpeg|png|bmp|ico|rss|xml|swf|woff2|ttf|eot)$"
          ] }
          add_tag => [ "not_page" ]
          tag_on_failure => [ "page" ]
        }
        mutate {
          remove_field => [ "requestpath" ]
          remove_tag => [ "find_pagenotpage" ]
        }
      }
    }
  }
}

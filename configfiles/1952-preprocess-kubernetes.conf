# SOF-ELKÂ® Configuration File
# (C)2025 Lewes Technology Consulting, LLC
#
# This file parses timestamp+JSON or timestamp+KV-formatted Kubernetes logs

filter {
  if [labels][type] == "kubernetes" {

    # pull timestamp from start of line and replace message with what is left
    grok {
      match => [ "message", "^\[?%{TIMESTAMP_ISO8601:raw_timestamp}\]?%{SPACE}+%{GREEDYDATA:message_remainder}" ]
    }
    mutate {
      replace => { "message" => "%{message_remainder}" }
    }
    # this goes in a separate stanza or the replace=>{} above won't (always??) work
    mutate {
      remove_field => [ "message_remainder" ]
    }
    date {
      match => [ "raw_timestamp", "ISO8601" ]
    }

    # attempt to parse JSON, as some k8s logs use it.  if that doesn't work, attempt to get the klog format fields.  lastly, revert to pure kv parsing.
    json {
      source => "message"
      target => "k8s"
      add_tag => [ "k8s_json" ]
      skip_on_invalid_json => true 
    }

    if "k8s_json" in [tags] {
      # some logs have fields simply named ".", which will cause elasticsearch errors and the entire record being dropped
      # might be able to get deeper, but managedFields is an array observed so far with <=2 entries
      mutate {
        remove_field => [
          "[k8s][requestObject][metadata]",
          "[k8s][responseObject][metadata]"
        ]
      }

      # k8s.responseObject.status might be a single string - if so, make it an object to match the rest of the data
      if [k8s][responseObject][status] == "Success" or [k8s][responseObject][status] == "Failure" {
        mutate {
          add_field => { "status_result" => "%{[k8s][responseObject][status]}" }
          remove_field => [ "[k8s][responseObject][status]"]
        }
        mutate {
          rename => { "status_result" => "[k8s][responseObject][status][result]" }
        }
      }

    # else, there was no JSON and we have to attack with grok and kv
    } else {
      grok {
        patterns_dir => [ "/usr/local/sof-elk/grok-patterns" ]
        match => [ "message", "(?<[k8s][level_letter]>[A-Z])%{NUMBER}%{SPACE}%{TIME}%{SPACE}%{NUMBER:[k8s][thread]}%{SPACE}%{NOTCOLON:[k8s][file]}:%{NUMBER:[k8s][line]}\]%{SPACE}(?:%{QS:[k8s][msg]}%{SPACE})?%{GREEDYDATA:message_remainder}" ]
        add_tag => "k8s_klog"
        tag_on_failure => [ "_grokparsefailure_k8s01" ]
      }
      if !( "fail_k8s01" in [tags] ) {
        # remove double-quotes from k8s.msg if it exists
        if [msg] {
          mutate {
            gsub => [
              "[msg]", "\"", ""
            ]
          }
        }

        ### TODO: map/replace level_letter to level name

        mutate {
          replace => { "message" => "%{message_remainder}" }
        }
        # this goes in a separate stanza or the replace=>{} above won't (always??) work
        mutate {
          remove_field => [ "message_remainder" ]
        }
      }

      kv {
        source => "message"
        target => "k8s"
        allow_empty_values => true
        whitespace => "strict"
        add_tag => [ "k8s_kv" ]
      }
    }

    if !( "k8s_json" in [tags] ) and !( "k8s_kv" in [tags] ) {
      mutate {
        rename => {
          "[message]" => "[k8s][msg]"
        }
      }
    }

    # get rid of the leftover fields
    mutate {
      remove_field => [ "message", "raw_timestamp" ]
    }
  }
}

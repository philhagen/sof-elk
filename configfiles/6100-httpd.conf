# SOF-ELKÂ® Configuration File
# (C)2025 Lewes Technology Consulting, LLC
#
# This file contains filters, transforms, and enrichments for HTTPD access log messages

filter {
  if [labels][type] == "httpdlog" {
    # this should only occur with syslog-based source records
    if [logsource] {
      mutate {
        add_field => { "[sof-elk][path]" => "HTTPD log from %{logsource}" }
        # the syslog handler populates this with the syslog-based date. we don't want that, though - we'll replace with the date parsed from the http log entry below
        remove_field => [ "timestamp" ]
      }
    } else if "filebeat" in [tags] {
      mutate {
        add_field => { "[sof-elk][path]" => "filebeat: %{[log][file][path]}" }
      }
    } else {
      mutate {
        add_field => { "[sof-elk][path]" => "unknown source" }
      }
    }

    # drop comments, mostly found in IIS logs
    if [message] =~ /^#/ {
      drop {}
    }

    grok {
      patterns_dir => [ "/usr/local/sof-elk/grok-patterns" ]

      match => { "message" => [
        # syslog-based entries, as used on my own servers (HTTP access log pushed via syslog messages)
        "%{SYSLOGTIMESTAMP} (?:%{SYSLOGFACILITY} )?%{SYSLOGHOST:logsource} %{SYSLOGPROG}: %{HOSTNAME:[url][domain]} %{COMBINEDPROXYLOG_CUSTOM}",
        "%{SYSLOGTIMESTAMP} (?:%{SYSLOGFACILITY} )?%{SYSLOGHOST:logsource} %{SYSLOGPROG}: %{HOSTNAME:[url][domain]} %{COMMONPROXYLOG_CUSTOM}",
        "%{SYSLOGTIMESTAMP} (?:%{SYSLOGFACILITY} )?%{SYSLOGHOST:logsource} %{SYSLOGPROG}: %{HOSTNAME:[url][domain]} %{COMBINEDAPACHELOG_CUSTOM}",
        "%{SYSLOGTIMESTAMP} (?:%{SYSLOGFACILITY} )?%{SYSLOGHOST:logsource} %{SYSLOGPROG}: %{HOSTNAME:[url][domain]} %{COMMONAPACHELOG_CUSTOM}",

        # live syslog-based data, partially parsed via the syslog{} input selector
        "%{HOSTNAME:[url][domain]} %{COMBINEDPROXYLOG_CUSTOM}",
        "%{HOSTNAME:[url][domain]} %{COMMONPROXYLOG_CUSTOM}",
        "%{HOSTNAME:[url][domain]} %{COMBINEDAPACHELOG_CUSTOM}",
        "%{HOSTNAME:[url][domain]} %{COMMONAPACHELOG_CUSTOM}",

        # straight-out NCSA combined/common formats.  combined has to go first, since common will match a combined entry as well - and we break on first match
        "%{COMBINEDPROXYLOG_CUSTOM}",
        "%{COMMONPROXYLOG_CUSTOM}",
        "%{COMBINEDAPACHELOG_CUSTOM}",
        "%{COMMONAPACHELOG_CUSTOM}",

        # IIS Logs, with help from http://logz.io/blog/iis-log-analyzer/
        # 2015-12-08 06:41:42 GET /handler/someservice.ashx someData=foobar 80 10.223.22.122 HTTP/1.1 Mozilla/5.0+(Windows+NT+6.1;+WOW64)+AppleWebKit/537.36+(KHTML,+like+Gecko)+Chrome/46.0.2490.86+Safari/537.36 1.2.1005047168.1446986881 http://www.logz.io/testing.aspx www.logz.io 200 638 795 0
        "%{TIMESTAMP_ISO8601:timestamp} %{WORD:[http][request][method]} %{URIPATH:[url][path]} %{NOTSPACE:[url][query]} %{NUMBER:[destination][port]} %{IPORHOST:[source][ip]} HTTP/%{NUMBER:[http][version]} %{NOTSPACE:[user_agent][original]} %{NOTSPACE:[http][request][cookie]} %{NOTSPACE:[http][request][referrer]} %{NOTSPACE:[url][domain]} %{NUMBER:[http][response][status_code]} %{NUMBER:[destination][bytes]} %{NUMBER:[source][bytes]} %{NUMBER:[event][duration]}",
        # 2002-05-24 20:18:01 172.224.24.114 - 206.73.118.24 80 GET /Default.htm - 200 7930 248 31 Mozilla/4.0+(compatible;+MSIE+5.01;+Windows+2000+Server) http://64.224.24.114/
        "%{TIMESTAMP_ISO8601:timestamp} %{IPORHOST:[source][ip]} %{HTTPDUSER:[client][user][name]} %{IPORHOST:[destination][ip]} %{NUMBER:[destination][port]} %{WORD:[http][request][method]]} %{URIPATH:[url][path]} %{NOTSPACE:[url][query]} %{NUMBER:[http][response][status_code]} %{NUMBER:[destination][bytes]} %{NUMBER:[source][bytes]} %{NUMBER:[event][duration]} %{NOTSPACE:[user_agent][original]} %{NOTSPACE:[http][request][referrer]}",
        # 2020-07-01 00:00:00 10.129.19.12 GET /en/whatever - 443 DOMAIN/user.name 10.129.19.5 Mozilla/5.0+(Windows+NT+10.0;+Win64;+x64)+AppleWebKit/537.36+(KHTML,+like+Gecko)+Chrome/81.0.4044.113+Safari/537.36 /path/folder 200 0 0 26863
        "%{TIMESTAMP_ISO8601:timestamp} %{IPORHOST:[destination][ip]} %{WORD:[http][request][method]} %{URIPATH:[url][path]} %{NOTSPACE:[url][query]} %{NUMBER:[destination][port]} %{HTTPDUSER:[client][user][name]} %{IPORHOST:[source][ip]} %{NOTSPACE:[user_agent][original]} %{NOTSPACE:[http][request][referrer]} %{NUMBER:[http][response][status_code]} %{NUMBER:[http][response][substatus_code]} %{NUMBER:[process][exit_code]} %{NUMBER:[event][duration]}",
        "%{TIMESTAMP_ISO8601:timestamp} %{NOTSPACE:[url][domain]} %{WORD:[http][request][method]} %{URIPATH:[url][path]} %{NOTSPACE:[url][query]} %{NUMBER:[destination][port]} %{HTTPDUSER:[client][user][name]} %{IPORHOST:[source][ip]} %{NOTSPACE:[user_agent][original]} %{NOTSPACE:[http][request][cookie]} %{NOTSPACE:[http][request][referrer]} %{NOTSPACE:[url][domain]} %{NUMBER:[http][response][status_code]} %{NUMBER:[http][response][substatus_code]} %{NUMBER:[process][exit_code]} %{NUMBER:[destination][bytes]} %{NUMBER:[source][bytes]} %{NUMBER:[event][duration]}",
        # 2020-07-01 00:00:00 10.129.19.12 GET /en/whatever - 443 - 10.129.19.5 Mozilla/5.0+(Windows+NT+10.0;+Win64;+x64)+AppleWebKit/537.36+(KHTML,+like+Gecko)+Chrome/81.0.4044.113+Safari/537.36 200 0 0 26863
        "%{TIMESTAMP_ISO8601:timestamp} %{IPORHOST:[destination][ip]} %{WORD:[http][request][method]} %{URIPATH:[url][path]} %{NOTSPACE:[url][query]} %{NUMBER:[destination][port]} %{HTTPDUSER:[client][user][name]} %{IPORHOST:[source][ip]} %{NOTSPACE:[user_agent][original]} %{NUMBER:[http][response][status_code]} %{NUMBER:[http][response][substatus_code]} %{NUMBER:[process][exit_code]} %{NUMBER:[event][duration]}",
        # 2022-09-30 23:59:46 10.12.11.17 POST /foo - 443 - 10.12.60.132 Mozilla/5.0+(Windows+NT+10.0;+Win64;+x64)+AppleWebKit/537.36+(KHTML,+like+Gecko)+Chrome/104.0.5112.102+Safari/537.36 https://url.com/foo.html 200 0 0 125 191.20.28.1
        "%{TIMESTAMP_ISO8601:timestamp} %{IPORHOST:[destination][ip]} %{WORD:[http][request][method]} %{URIPATH:[url][path]} %{NOTSPACE:[url][query]} %{NUMBER:[source][port]} %{HTTPDUSER:[client][user][name]} %{IPORHOST:[source][ip]} %{NOTSPACE:[user_agent][original]} %{NOTSPACE:[http][request][referrer]} %{NUMBER:[http][response][status_code]} %{NUMBER:[http][response][substatus_code]} %{NUMBER:[process][exit_code]} %{NUMBER:[event][duration]} %{IPORHOST:[xff][ip]}",
        # 2022-08-29 17:29:01 W3SVC2 SERVERNAME1 ::1 GET /js/dist/smartbanner.min.css v=13 443 - ::1 HTTP/2 Mozilla/5.0+(Windows+NT+10.0;+Win64;+x64)+AppleWebKit/537.36+(KHTML,+like+Gecko)+Chrome/104.0.5112.102+Safari/537.36+Edg/104.0.1293.70 https://localhost/ localhost 200 0 0 1615 780 4 - - - 400
        "%{TIMESTAMP_ISO8601:timestamp} %{NOTSPACE:[service][name]} %{NOTSPACE:[host][hostname]} %{IPORHOST:[destination][ip]} %{WORD:[http][request][method]} %{URIPATH:[url][path]} %{NOTSPACE:[url][query]} %{NUMBER:[destination][port]} %{NOTSPACE:[client][user][name]} %{IPORHOST:[source][ip]} %{NOTSPACE:[http][version]} %{NOTSPACE:[user_agent][original]} %{NOTSPACE:[http][request][referrer]} %{NOTSPACE:[url][domain]} %{NUMBER:[http][response][status_code]} %{NUMBER:[http][response][substatus_code]} %{NUMBER:[process][exit_code]} %{NUMBER:[destination][bytes]} %{NUMBER:[source][bytes]} %{NUMBER:[event][duration]} %{NOTSPACE:[xff][ip]} %{NOTSPACE:[http][x_protocol]} %{NOTSPACE:[tls][version]} %{NOTSPACE:[tls][protocol]}",

        # Amazon S3 Bucket Access Logs, see https://docs.aws.amazon.com/AmazonS3/latest/userguide/LogFormat.html
        ## Authenticated
        ### 385f9ef91a82f8ca241dbb08d21b781846f4b75b73589dec7a054f8781cef6eb pymresearch [01/May/2021:02:48:36 +0000] 47.185.244.137 arn:aws:iam::305681518678:user/slang KDSEANFQKAKRKSW5 REST.HEAD.BUCKET - "HEAD /pymresearch HTTP/1.1" 200 - - - 64 63 "-" "S3Console/0.4, aws-internal/3 aws-sdk-java/1.11.991 Linux/5.4.109-57.182.amzn2int.x86_64 OpenJDK_64-Bit_Server_VM/25.282-b08 java/1.8.0_282 vendor/Oracle_Corporation cfg/retry-mode/legacy" - sMgzTIbb/D0+TiZ5hji7rysKz0YeU+0nTbPyzqOL9PXXyxB3LOQMEVg4xuVZJLDTsjw1VTaoc3w= SigV4 ECDHE-RSA-AES128-GCM-SHA256 AuthHeader s3.amazonaws.com TLSv1.2
        ## Unauthenticated
        ### 385f9ef91a82f8ca241dbb08d21b781846f4b75b73589dec7a054f8781cef6eb pymresearch [01/May/2021:17:25:22 +0000] 5.62.19.43 - 4D1Q49NMZ4ZJ4RF5 REST.GET.OBJECT PymWrapper.py "GET /PymWrapper.py HTTP/1.1" 404 NoSuchKey 284 - 12 - "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:88.0) Gecko/20100101 Firefox/88.0" - WWFnSBORSUeLgMmrv9KWGXBVPJaNHzw1cDNyLV6Gh1W5XNfCFZ010/cuZ624MLkZkVJPfZlsFe8= - - - pymresearch.s3.amazonaws.com -
        "%{AWSACCOUNTID:[aws][s3access][bucket_owner]} %{WORD:[aws][s3access][bucket]} \[%{HTTPDATE:timestamp}\] %{IPORHOST:[source][ip]} %{AWSACCOUNTID:[aws][s3access][arn]} %{WORD:[aws][s3access][request_id]} %{NOTSPACE:[aws][s3access][operation]} %{NOTSPACE:[aws][s3access][key]} \"(?:%{WORD:[http][request][method]} (?:%{URIPATH_CUSTOM:[url][path]})?(?:\?%{NOTSPACE:[url][query]})?(?: HTTP/%{NUMBER:[http][version]})?|%{DATA:[sof-elk][rawrequest]})\" %{NUMBER:[http][response][status_code]} %{NOTSPACE:[aws][s3access][error_code]} %{NOTSPACE:[destination][bytes]} %{NOTSPACE:[aws][s3access][object_size]} %{NOTSPACE:[event][duration]} %{NOTSPACE:[aws][s3access][turn_around_time]} %{QS:[http][request][referrer]} %{QS:[user_agent][original]} %{NOTSPACE:[aws][s3access][version_id]} %{NOTSPACE:[aws][s3access][host_id]} %{NOTSPACE:[aws][s3access][signature_version]} %{NOTSPACE:[tls][cipher]} %{NOTSPACE:[aws][s3access][authentication_type]} %{HOSTNAME:[url][domain]} %{NOTSPACE:[tls][protocol]}",

        # Amazon Loadbalancer logs, see https://stackoverflow.com/questions/53857164/aws-loadbalancer-logs-from-s3-to-elastic-search (specifically https://stackoverflow.com/a/58077713/1400064)
        # 2022-05-16T23:25:46.364556Z a662bccc7fb194c68959bdc3b895f928 135.125.246.110:59428 10.0.5.167:30410 0.000345 0.000008 0.000015 - - 228 489 "- - - " "-" - -
        # NOTE: %{ELB_REQUEST_LINE} should be used when moving to ECS rather than the manual "(?:%{WORD:[http][request][method]} (?:%{WORD:[url][scheme]}://)?(?:%{HOSTNAME:[url][domain]}(?::%{POSINT:[destination][port]:int})?)?(?:%{URIPATH_CUSTOM:[url][path]})?(?:\?%{NOTSPACE:[url][query]})?(?: HTTP/%{NUMBER:[http][version]})?|%{DATA:[sof-elk][rawrequest]})"
        "%{TIMESTAMP_ISO8601:timestamp} %{NOTSPACE:[aws][elb][name]} %{IPORHOST:[source][ip]}:%{INT:[source][port]:int} (?:(%{IPORHOST:[backend][ip]}:?:%{INT:[backend][port]:int})|-) %{NUMBER:[aws][elb][request_processing_time][sec]:float} %{NUMBER:[aws][elb][backend_processing_time][sec]:float} %{NUMBER:[aws][elb][response_processing_time][sec]:float} (?:%{INT:[http][response][status_code]:int}|-) (?:%{INT:[aws][elb][backend][http][response][status_code]:int}|-) %{INT:[source][bytes]:int} %{INT:[destination][bytes]:int} \"(?:%{WORD:[http][request][method]} (?:%{WORD:[url][scheme]}://)?(?:%{HOSTNAME:[url][domain]}(?::%{POSINT:[destination][port]:int})?)?(?:%{URIPATH_CUSTOM:[url][path]})?(?:\?%{NOTSPACE:[url][query]})?(?: HTTP/%{NUMBER:[http][version]})?|%{DATA:[sof-elk][rawrequest]})\" (?:%{QS:[user_agent][original]}) (?:%{NOTSPACE:[tls][cipher]}|-) (?:%{NOTSPACE:[tls][protocol]}|-)"
        ]
      }

      add_tag => [ "parse_done" ]
      tag_on_failure => [ "_grokparsefailure_ht01" ]
    }
    # [xff][ip] could be of the format 47.47.47.47,+198.198.198.198 (see #314)
    if [xff][ip] and [xff][ip] =~ ",\+" {
      mutate {
        gsub => [ "[xff][ip]", ",\+", "," ]
        split => { "[xff][ip]" => "," }
      }
    }
    # xff_ip could be of the format 47.47.47.47,+198.198.198.198 (see #314)
    if [xff_ip] and [xff_ip] =~ ",\+" {
      mutate {
        gsub => [ "xff_ip", ",\+", "," ]
        split => { "xff_ip" => "," }
      }
    }

    # GCP Storage Logs
    # detect a microsecond timestamp as the first value of a CSV line which suggests the entry may be GCP Storage Logs
    # "time_micros","c_ip","c_ip_type","c_ip_region","cs_method","cs_uri","sc_status","cs_bytes","sc_bytes","time_taken_micros","cs_host","cs_referer","cs_user_agent","s_request_id","cs_operation","cs_bucket","cs_object"
    # "1683453419625302","159.196.168.9","1","","GET","/storage/v1/b/prod-blogapp-02958079b79bf440/o/shared%2Ffiles%2F.ssh%2Fkeys%2Fmary.pem?alt=json&prettyPrint=false","200","0","829","105000","storage.googleapis.com","","google-api-go-client/0.5 Terraform/1.4.6 (+https://www.terraform.io) Terraform-Plugin-SDK/2.10.1 terraform-provider-google/4.63.1,gzip(gfe)","ADPycdv6AhFIIpeZCIyZXD_nZbKM9Z3PL9DFoyGnhSHKkTtQr2QZwqcP42WMrrJAh4KwcckFXbQaKOVV7KTqt6CViua4ag","storage.objects.get","prod-blogapp-02958079b79bf440","shared/files/.ssh/keys/mary.pem"
    # Reference: https://cloud.google.com/storage/docs/access-logs#format

    if !( "parse_done" in [tags] ) {
      if [message] =~ /^"[0-9]{16}",/ {
        csv {
          columns => [ "timestamp_micros", "source_ip", "source_ip_type", "source_ip_region", "request_method", "request", "response_code", "source_bytes", "destination_bytes", "response_time_micros", "hostname", "referrer", "useragent", "request_id", "operation", "bucketname", "object" ]
          skip_empty_columns => "true"
          skip_empty_rows => "true"

          convert => {
            "timestamp_micros" => "integer"
            "response_code" => "integer"
            "source_bytes" => "integer"
            "destination_bytes" => "integer"
            "response_time_micros" => "integer"
          }
          add_tag => [ "gcp_storage_log" ]
        }

        # convert time_micros and response_time_micros to milliseconds
        ruby {
          code => "
            event.set('timestamp', event.get('timestamp_micros').to_i / 1000)
            event.set('response_time', event.get('response_time_micros').to_i / 1000)
          "

          remove_field => [ "timestamp_micros", "response_time_micros" ]
        }

        # For some reason, source IP may be empty, which breaks downstream processing.
        # If so, set to "-" for consistency with other HTTP logs
        if ![source_ip] {
          mutate {
            add_field => { "[source_ip]" => "-" }
          }
        }

        mutate {
          rename => {
            "source_ip" => "[source][ip]"
            "source_bytes" => "[source][bytes]"
            "destination_bytes" => "[destination][bytes]"
            "request_method" => "[http][request][method]"
            "referrer" => "[http][request][referrer]"
            "useragent" => "[user_agent][original]"
            "response_code" => "[http][response][status_code]"
            "hostname" => "[url][domain]"
            "request" => "[url][path]"
            "response_time" => "[event][duration]"
            "request_id" => "[gcp][storage][request_id]"
            "bucketname" => "[gcp][storage][bucket]"
            "operation" => "[gcp][storage][operation]"
            "object" => "[gcp][storage][request][object]"
          }
          remove_field => [ "source_ip_type", "source_ip_region" ]
          add_tag => [ "parse_done" ]
        }

      } else if [message] =~ /^"time_micros"/ {
        # drop the header row
        drop {}
      }
    }

    # if nothing above matched, we might have a corrupt or partial record.  let's try to squeak out whatever fields we can
    if !( "parse_done" in [tags] ) {
      grok {
        patterns_dir => [ "/usr/local/sof-elk/grok-patterns" ]

        match => { "message" =>
          [
            # match first few fields from the syslog-based format
            "%{SYSLOGTIMESTAMP} %{SYSLOGHOST} %{SYSLOGPROG}: %{HOSTNAME:[url][domain]} %{IPORHOST:[source][ip]} %{HTTPDUSER:[client][user][name]} %{NOTSPACE:[server][user][name]} \[%{HTTPDATE:timestamp}\]",

            # client IP address is first entry in NCSA combined/common formats
            "^%{IPORHOST:[source][ip]} %{HTTPDUSER:[client][user][name]} %{NOTSPACE:[server][user][name]} \[%{HTTPDATE:timestamp}\]",

            # first few fields from ssl_access_log format
            "^\[%{HTTPDATE:timestamp}\] %{IPORHOST:[source][ip]}",

            # find ANY httplog-formatted date string
            "\[%{HTTPDATE:timestamp}\]"
          ]
        }
        
        add_tag => [ "partial_httpd_log", "parse_done" ]
        tag_on_failure => [ "_grokparsefailure_ht02" ]
      }
    }

    # re-assemble an entire URL if all the components are there
    if [url][scheme] and [url][domain] and [url][path] {
      if [destination][port] {
        mutate {
          add_field => { "[url][original]" => "%{[url][scheme]}://%{[url][domain]}:%{[destination][port]}%{[url][path]}" }
        }
      } else {
        mutate {
          add_field => { "[url][original]" => "%{[url][scheme]}://%{[url][domain]}%{[url][path]}" }
        }
      }

      if [url][query] {
        mutate {
          replace => { "[url][original]" => "%{[url][original]}?%{[url][query]}" }
        }
      }
    }

    if "[timestamp]" {
      date {
        match => [ "timestamp", "dd/MMM/yyyy:HH:mm:ss Z", "YYYY-MM-dd HH:mm:ss", "ISO8601", "UNIX", "UNIX_MS" ]
        remove_field => [ "timestamp" ]
      }
    } else {
      mutate {
        add_tag => [ "missing_timestamp" ]
      }
    }

    mutate {
      remove_field => [ "program" ]
    }

    if "parse_done" in [tags] {
      mutate {
        remove_field => [ "message" ]
      }
    }
  }
}

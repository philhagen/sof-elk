# SOF-ELKÂ® Configuration File
# (C)2025 Lewes Technology Consulting, LLC
#
# This file contains filters, transforms, and enrichments for LNK file logs from the KAPE forensic tool

filter {
  if [labels][type] == "kape_lnkfiles" {
    mutate {
      # create "origin" and "target" superfields (origin/source means the .lnk file itself; target means the file the .lnk file points to)
      # promote necessary fields from the [raw] placeholder
      # remove the [raw] placeholder
      rename => {
        "[raw][SourceCreated]" => "[file][created]"
        "[raw][SourceModified]" => "[file][mtime]"
        "[raw][SourceAccessed]" => "[file][accessed]"

        "[raw][TargetCreated]" => "[file][target][created]"
        "[raw][TargetModified]" => "[file][target][mtime]"
        "[raw][TargetAccessed]" => "[file][target][accessed]"

        "[raw][MachineMACAddress]" => "[file][tracker][mac]"
        "[raw][MACVendor]" => "[file][tracker][mac_vendor]"
        "[raw][TrackerCreatedOn]" => "[file][tracker][creation]"
        "[raw][MachineID]" => "[file][tracker][machine_id]"

        "[raw][FileSize]" => "[file][size]"
        "[raw][Arguments]" => "[file][target][path][arguments]"
        "[raw][DriveType]" => "[file][target][drivetype]"
        "[raw][VolumeSerialNumber]" => "[volume][serial_number]"
        "[raw][VolumeLabel]" => "[file][target][volume][label]"
        "[raw][SourceFile]" => "[file][path]"
        "[raw][LocalPath]" => "[file][target][local_path]"
        "[raw][NetworkPath]" => "[file][target][network_path]"
        "[raw][CommonPath]" => "[file][target][common_path]"
        "[raw][TargetIDAbsolutePath]" => "[file][target][absolute_path]"
        "[raw][RelativePath]" => "[file][target][relative_path]"
        "[raw][WorkingDirectory]" => "[file][target][working_directory]"
        "[raw][TargetMFTEntryNumber]" => "[file][target][inode_string]"
        "[raw][TargetMFTSequenceNumber]" => "[file][target][sequence_number_string]"
        "[raw][HeaderFlags]" => "[file][header_flags]"
        "[raw][FileAttributes]" => "[file][attributes]"
      }
      add_field => { "[file][extension]" => "lnk" }
    }
    grok {
      match => { "[source][path]", [
        "%{GREEDYDATA}\\\\%{GREEDYDATA:[file][name]}$"
      ] }
      tag_on_failure => [ "_grokparsefail_6503-01"]
    }

    # populate file.target.path based on what fields are present
    if [file][target][local_path] {
      mutate {
        copy => { "[file][target][local_path]" => "[file][target][path]" }
      }
    } else if [file][target][absolute_path] {
      mutate {
        copy => { "[file][target][absolute_path]" => "[file][target][path]" }
      }
    }

    if [file][header_flags] {
      mutate {
        gsub => [ "[file][header_flags]", " ", "" ]
        lowercase => [ "[file][header_flags]" ]
      }
      ruby {
        path => "/usr/local/sof-elk/supporting-scripts/data_flags_to_array.rb"
        script_params => {
          "source_field" => "[file][header_flags]"
          "source_type" => "str"
        }
      }
    }
    if [file][attributes] {
      mutate {
        gsub => [
          "[file][attributes]", " ", "",
          "[file][attributes]", "FileAttribute", ""
        ]
        lowercase => [ "[file][attributes]" ]
        add_field => {
          "[@metadata][attribute_type]" => "str"
        }
      }
    }

    # https://github.com/libyal/liblnk/blob/main/documentation/Windows%20Shortcut%20File%20(LNK)%20format.asciidoc#6-extra-data
    if [raw][ExtraBlocks_Present] {
      mutate {
        rename => {
          "[raw][ExtraBlocks_Present]" => "[file][extra_blocks]"
        }
        gsub => [
          "[file][extra_blocks]", " ", "",
          "[file][extra_blocks]", "Block", ""
        ]
        lowercase => [ "[file][extra_blocks]" ]
      }
      ruby {
        path => "/usr/local/sof-elk/supporting-scripts/extra_blocks_to_array.rb"
        script_params => {
          "source_field" => "[file][extra_blocks]"
          "source_type" => "str"
        }
      }
    }

    # clean up known potentially empty fields
    if [file][target][created] == "" {
      mutate {
        remove_field => [ "[file][target][created]" ]
      }
    }
    if [file][target][mtime] == "" {
      mutate {
        remove_field => [ "[file][target][mtime]" ]
      }
    }
    if [file][target][accessed] == "" {
      mutate {
        remove_field => [ "[file][target][accessed]" ]
      }
    }
    if [file][target][drivetype] == "(None)" {
      mutate {
        remove_field => [ "[file][target][drivetype]" ]
      }
    }

    # use the origin last modified time for @timestamp
    date {
      match => [ "[file][mtime]", "ISO8601" ]
    }

    # convert all timestamps to date/time types
    date {
      match => [ "[file][created]", "ISO8601" ]
      target => "[file][created]"
    }
    date {
      match => [ "[file][mtime]", "ISO8601" ]
      target => "[file][mtime]"
    }
    date {
      match => [ "[file][accessed]", "ISO8601" ]
      target => "[file][accessed]"
    }
    date {
      match => [ "[file][trackercreatedon]", "ISO8601" ]
      target => "[file][trackercreatedon]"
    }
    date {
      match => [ "[file][target][created]", "ISO8601" ]
      target => "[file][target][created]"
    }
    date {
      match => [ "[file][target][mtime]", "ISO8601" ]
      target => "[file][target][mtime]"
    }
    date {
      match => [ "[file][target][accessed]", "ISO8601" ]
      target => "[file][target][accessed]"
    }

    if [file][target][inode_string] {
      ruby {
        code => "event.set('file.target.inode', Integer(event.get('[file][target][inode_string]')))"
        remove_field => [ "[file][target][inode_string]" ]
      }
    }
    if [file][target][sequence_number_string] {
      ruby {
        code => "event.set('file.target.sequence_number', Integer(event.get('[file][target][sequence_number_string]')))"
        remove_field => [ "[file][target][sequence_number_string]" ]
      }
    }
  }
}
